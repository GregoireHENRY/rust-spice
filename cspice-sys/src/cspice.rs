/* automatically generated by rust-bindgen 0.56.0 */

pub const SPICE_ERROR_LMSGLN: u32 = 1841;
pub const SPICE_ERROR_SMSGLN: u32 = 26;
pub const SPICE_ERROR_XMSGLN: u32 = 81;
pub const SPICE_ERROR_MODLEN: u32 = 33;
pub const SPICE_ERROR_MAXMOD: u32 = 100;
pub const SPICE_ERROR_TRCLEN: u32 = 3696;
pub const SPICE_EK_CNAMSZ: u32 = 32;
pub const SPICE_EK_CSTRLN: u32 = 33;
pub const SPICE_EK_TNAMSZ: u32 = 64;
pub const SPICE_EK_TSTRLN: u32 = 65;
pub const SPICE_EK_MXCLSG: u32 = 100;
pub const SPICE_EK_TYPLEN: u32 = 4;
pub const SPICE_EK_MAXQRY: u32 = 2000;
pub const SPICE_EK_MAXQSEL: u32 = 50;
pub const SPICE_EK_MAXQTAB: u32 = 10;
pub const SPICE_EK_MAXQCON: u32 = 1000;
pub const SPICE_EK_MAXQJOIN: u32 = 10;
pub const SPICE_EK_MAXQJCON: u32 = 100;
pub const SPICE_EK_MAXQORD: u32 = 10;
pub const SPICE_EK_MAXQTOK: u32 = 500;
pub const SPICE_EK_MAXQNUM: u32 = 100;
pub const SPICE_EK_MAXQCLN: u32 = 2000;
pub const SPICE_EK_MAXQSTR: u32 = 1024;
pub const SPICE_EK_VARSIZ: i32 = -1;
pub const SPICE_NFRAME_NINERT: u32 = 21;
pub const SPICE_NFRAME_NNINRT: u32 = 106;
pub const SPICE_FRMTYP_INERTL: u32 = 1;
pub const SPICE_FRMTYP_PCK: u32 = 2;
pub const SPICE_FRMTYP_CK: u32 = 3;
pub const SPICE_FRMTYP_TK: u32 = 4;
pub const SPICE_FRMTYP_DYN: u32 = 5;
pub const SPICE_FRMTYP_ALL: i32 = -1;
pub const SPICE_CELL_CTRLSZ: u32 = 6;
pub const SPICE_GF_NWMAX: u32 = 15;
pub const SPICE_GF_NWDIST: u32 = 5;
pub const SPICE_GF_NWILUM: u32 = 5;
pub const SPICE_GF_NWSEP: u32 = 5;
pub const SPICE_GF_NWRR: u32 = 5;
pub const SPICE_GF_NWPA: u32 = 5;
pub const SPICE_GF_MAXVRT: u32 = 10000;
pub const SPICE_GF_CIRFOV: &'static [u8; 7usize] = b"CIRCLE\0";
pub const SPICE_GF_ELLFOV: &'static [u8; 8usize] = b"ELLIPSE\0";
pub const SPICE_GF_POLFOV: &'static [u8; 8usize] = b"POLYGON\0";
pub const SPICE_GF_RECFOV: &'static [u8; 10usize] = b"RECTANGLE\0";
pub const SPICE_GF_SHPLEN: u32 = 10;
pub const SPICE_GF_ANNULR: &'static [u8; 8usize] = b"ANNULAR\0";
pub const SPICE_GF_ANY: &'static [u8; 4usize] = b"ANY\0";
pub const SPICE_GF_FULL: &'static [u8; 5usize] = b"FULL\0";
pub const SPICE_GF_PARTL: &'static [u8; 8usize] = b"PARTIAL\0";
pub const SPICE_GF_EDSHAP: &'static [u8; 10usize] = b"ELLIPSOID\0";
pub const SPICE_GF_PTSHAP: &'static [u8; 6usize] = b"POINT\0";
pub const SPICE_GF_RYSHAP: &'static [u8; 4usize] = b"RAY\0";
pub const SPICE_GF_SPSHAP: &'static [u8; 7usize] = b"SPHERE\0";
pub const SPICE_GF_ADDWIN: f64 = 1.0;
pub const SPICE_GFEVNT_MAXPAR: u32 = 10;
pub const SPICE_OCCULT_TOTAL1: i32 = -3;
pub const SPICE_OCCULT_ANNLR1: i32 = -2;
pub const SPICE_OCCULT_PARTL1: i32 = -1;
pub const SPICE_OCCULT_NOOCC: u32 = 0;
pub const SPICE_OCCULT_PARTL2: u32 = 1;
pub const SPICE_OCCULT_ANNLR2: u32 = 2;
pub const SPICE_OCCULT_TOTAL2: u32 = 3;
pub const SPICE_DLA_DSCSIZ: u32 = 8;
pub const SPICE_DLA_BWDIDX: u32 = 0;
pub const SPICE_DLA_FWDIDX: u32 = 1;
pub const SPICE_DLA_IBSIDX: u32 = 2;
pub const SPICE_DLA_ISZIDX: u32 = 3;
pub const SPICE_DLA_DBSIDX: u32 = 4;
pub const SPICE_DLA_DSZIDX: u32 = 5;
pub const SPICE_DLA_CBSIDX: u32 = 6;
pub const SPICE_DLA_CSZIDX: u32 = 7;
pub const SPICE_DSK_DSCSIZ: u32 = 24;
pub const SPICE_DSK_NSYPAR: u32 = 10;
pub const SPICE_DSK_SRFIDX: u32 = 0;
pub const SPICE_DSK_CTRIDX: u32 = 1;
pub const SPICE_DSK_CLSIDX: u32 = 2;
pub const SPICE_DSK_TYPIDX: u32 = 3;
pub const SPICE_DSK_FRMIDX: u32 = 4;
pub const SPICE_DSK_SYSIDX: u32 = 5;
pub const SPICE_DSK_PARIDX: u32 = 6;
pub const SPICE_DSK_MN1IDX: u32 = 16;
pub const SPICE_DSK_MX1IDX: u32 = 17;
pub const SPICE_DSK_MN2IDX: u32 = 18;
pub const SPICE_DSK_MX2IDX: u32 = 19;
pub const SPICE_DSK_MN3IDX: u32 = 20;
pub const SPICE_DSK_MX3IDX: u32 = 21;
pub const SPICE_DSK_BTMIDX: u32 = 22;
pub const SPICE_DSK_ETMIDX: u32 = 23;
pub const SPICE_DSK_SVFCLS: u32 = 1;
pub const SPICE_DSK_GENCLS: u32 = 2;
pub const SPICE_DSK_LATSYS: u32 = 1;
pub const SPICE_DSK_CYLSYS: u32 = 2;
pub const SPICE_DSK_RECSYS: u32 = 3;
pub const SPICE_DSK_PDTSYS: u32 = 4;
pub const SPICE_DSK02_MAXVRT: u32 = 16000002;
pub const SPICE_DSK02_MAXPLT: u32 = 32000000;
pub const SPICE_DSK02_MAXNPV: u32 = 48000001;
pub const SPICE_DSK02_MAXVOX: u32 = 100000000;
pub const SPICE_DSK02_MAXCGR: u32 = 100000;
pub const SPICE_DSK02_MAXEDG: u32 = 120;
pub const SPICE_DSK02_SIVGRX: u32 = 0;
pub const SPICE_DSK02_SICGSC: u32 = 3;
pub const SPICE_DSK02_SIVXNP: u32 = 4;
pub const SPICE_DSK02_SIVXNL: u32 = 5;
pub const SPICE_DSK02_SIVTNL: u32 = 6;
pub const SPICE_DSK02_SICGRD: u32 = 7;
pub const SPICE_DSK02_IXIFIX: u32 = 100007;
pub const SPICE_DSK02_SIVTBD: u32 = 0;
pub const SPICE_DSK02_SIVXOR: u32 = 6;
pub const SPICE_DSK02_SIVXSZ: u32 = 9;
pub const SPICE_DSK02_IXDFIX: u32 = 10;
pub const SPICE_DSK02_SPADSZ: u32 = 10;
pub const SPICE_DSK02_MAXVXP: u32 = 16000000;
pub const SPICE_DSK02_MAXCEL: u32 = 60000000;
pub const SPICE_DSK02_MXNVLS: u32 = 68000000;
pub const SPICE_DSK02_SPAISZ: u32 = 148100010;
pub const SPICE_DSK02_KWNV: u32 = 1;
pub const SPICE_DSK02_KWNP: u32 = 2;
pub const SPICE_DSK02_KWNVXT: u32 = 3;
pub const SPICE_DSK02_KWVGRX: u32 = 4;
pub const SPICE_DSK02_KWCGSC: u32 = 5;
pub const SPICE_DSK02_KWVXPS: u32 = 6;
pub const SPICE_DSK02_KWVXLS: u32 = 7;
pub const SPICE_DSK02_KWVTLS: u32 = 8;
pub const SPICE_DSK02_KWPLAT: u32 = 9;
pub const SPICE_DSK02_KWVXPT: u32 = 10;
pub const SPICE_DSK02_KWVXPL: u32 = 11;
pub const SPICE_DSK02_KWVTPT: u32 = 12;
pub const SPICE_DSK02_KWVTPL: u32 = 13;
pub const SPICE_DSK02_KWCGPT: u32 = 14;
pub const SPICE_DSK02_KWDSC: u32 = 15;
pub const SPICE_DSK02_KWVTBD: u32 = 16;
pub const SPICE_DSK02_KWVXOR: u32 = 17;
pub const SPICE_DSK02_KWVXSZ: u32 = 18;
pub const SPICE_DSK02_KWVERT: u32 = 19;
pub const SPICE_DSKXSI_DCSIZE: u32 = 1;
pub const SPICE_DSKXSI_ICSIZE: u32 = 1;
pub const SPICE_DSK_KEYXFR: u32 = 1;
pub const SPICE_DSK_KEYSGR: u32 = 2;
pub const SPICE_DSK_KEYSPM: u32 = 3;
pub const SPICE_DSK_KEYPTM: u32 = 4;
pub const SPICE_DSK_KEYAMG: u32 = 5;
pub const SPICE_DSK_KEYLAL: u32 = 6;
pub const SPICE_SRF_SFNMLN: u32 = 37;
pub const SPICE_SRF_MAXSRF: u32 = 100;
pub const SPICE_OSCLTX_NELTS: u32 = 20;
pub type SpiceChar = ::std::os::raw::c_char;
pub type SpiceDouble = f64;
pub type SpiceFloat = f32;
pub type SpiceInt = ::std::os::raw::c_int;
pub type ConstSpiceChar = ::std::os::raw::c_char;
pub type ConstSpiceDouble = f64;
pub type ConstSpiceInt = ::std::os::raw::c_int;
pub type SpiceLong = ::std::os::raw::c_long;
pub type SpiceShort = ::std::os::raw::c_short;
pub type SpiceUChar = ::std::os::raw::c_uchar;
pub type SpiceUInt = ::std::os::raw::c_uint;
pub type SpiceULong = ::std::os::raw::c_ulong;
pub type SpiceUShort = ::std::os::raw::c_ushort;
pub type SpiceSChar = ::std::os::raw::c_schar;
pub type SpiceBoolean = ::std::os::raw::c_int;
pub type ConstSpiceBoolean = ::std::os::raw::c_int;
pub const _Spicestatus_SPICEFAILURE: _Spicestatus = -1;
pub const _Spicestatus_SPICESUCCESS: _Spicestatus = 0;
pub type _Spicestatus = ::std::os::raw::c_int;
pub use self::_Spicestatus as SpiceStatus;
pub const _SpiceDataType_SPICE_CHR: _SpiceDataType = 0;
pub const _SpiceDataType_SPICE_DP: _SpiceDataType = 1;
pub const _SpiceDataType_SPICE_INT: _SpiceDataType = 2;
pub const _SpiceDataType_SPICE_TIME: _SpiceDataType = 3;
pub const _SpiceDataType_SPICE_BOOL: _SpiceDataType = 4;
pub type _SpiceDataType = ::std::os::raw::c_uint;
pub use self::SpiceDataType as SpiceEKDataType;
pub use self::_SpiceDataType as SpiceDataType;
pub const _SpiceEKExprClass_SPICE_EK_EXP_COL: _SpiceEKExprClass = 0;
pub const _SpiceEKExprClass_SPICE_EK_EXP_FUNC: _SpiceEKExprClass = 1;
pub const _SpiceEKExprClass_SPICE_EK_EXP_EXPR: _SpiceEKExprClass = 2;
pub type _SpiceEKExprClass = ::std::os::raw::c_uint;
pub use self::_SpiceEKExprClass as SpiceEKExprClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SpiceEKAttDsc {
    pub cclass: SpiceInt,
    pub dtype: SpiceEKDataType,
    pub strlen: SpiceInt,
    pub size: SpiceInt,
    pub indexd: SpiceBoolean,
    pub nullok: SpiceBoolean,
}
#[test]
fn bindgen_test_layout__SpiceEKAttDsc() {
    assert_eq!(
        ::std::mem::size_of::<_SpiceEKAttDsc>(),
        24usize,
        concat!("Size of: ", stringify!(_SpiceEKAttDsc))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpiceEKAttDsc>(),
        4usize,
        concat!("Alignment of ", stringify!(_SpiceEKAttDsc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKAttDsc>())).cclass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKAttDsc),
            "::",
            stringify!(cclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKAttDsc>())).dtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKAttDsc),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKAttDsc>())).strlen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKAttDsc),
            "::",
            stringify!(strlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKAttDsc>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKAttDsc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKAttDsc>())).indexd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKAttDsc),
            "::",
            stringify!(indexd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKAttDsc>())).nullok as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKAttDsc),
            "::",
            stringify!(nullok)
        )
    );
}
pub type SpiceEKAttDsc = _SpiceEKAttDsc;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SpiceEKSegSum {
    pub tabnam: [SpiceChar; 65usize],
    pub nrows: SpiceInt,
    pub ncols: SpiceInt,
    pub cnames: [[SpiceChar; 33usize]; 100usize],
    pub cdescrs: [SpiceEKAttDsc; 100usize],
}
#[test]
fn bindgen_test_layout__SpiceEKSegSum() {
    assert_eq!(
        ::std::mem::size_of::<_SpiceEKSegSum>(),
        5776usize,
        concat!("Size of: ", stringify!(_SpiceEKSegSum))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpiceEKSegSum>(),
        4usize,
        concat!("Alignment of ", stringify!(_SpiceEKSegSum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKSegSum>())).tabnam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKSegSum),
            "::",
            stringify!(tabnam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKSegSum>())).nrows as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKSegSum),
            "::",
            stringify!(nrows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKSegSum>())).ncols as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKSegSum),
            "::",
            stringify!(ncols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKSegSum>())).cnames as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKSegSum),
            "::",
            stringify!(cnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEKSegSum>())).cdescrs as *const _ as usize },
        3376usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEKSegSum),
            "::",
            stringify!(cdescrs)
        )
    );
}
pub type SpiceEKSegSum = _SpiceEKSegSum;
pub use self::_SpiceDataType as SpiceCellDataType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SpiceCell {
    pub dtype: SpiceCellDataType,
    pub length: SpiceInt,
    pub size: SpiceInt,
    pub card: SpiceInt,
    pub isSet: SpiceBoolean,
    pub adjust: SpiceBoolean,
    pub init: SpiceBoolean,
    pub base: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__SpiceCell() {
    assert_eq!(
        ::std::mem::size_of::<_SpiceCell>(),
        48usize,
        concat!("Size of: ", stringify!(_SpiceCell))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpiceCell>(),
        8usize,
        concat!("Alignment of ", stringify!(_SpiceCell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).dtype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).card as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(card)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).isSet as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(isSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).adjust as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(adjust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceCell>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceCell),
            "::",
            stringify!(data)
        )
    );
}
pub type SpiceCell = _SpiceCell;
pub const _SpiceTransDir_C2F: _SpiceTransDir = 0;
pub const _SpiceTransDir_F2C: _SpiceTransDir = 1;
pub type _SpiceTransDir = ::std::os::raw::c_uint;
pub use self::_SpiceTransDir as SpiceTransDir;
pub const _SpiceCK05Subtype_C05TP0: _SpiceCK05Subtype = 0;
pub const _SpiceCK05Subtype_C05TP1: _SpiceCK05Subtype = 1;
pub const _SpiceCK05Subtype_C05TP2: _SpiceCK05Subtype = 2;
pub const _SpiceCK05Subtype_C05TP3: _SpiceCK05Subtype = 3;
pub type _SpiceCK05Subtype = ::std::os::raw::c_uint;
pub use self::_SpiceCK05Subtype as SpiceCK05Subtype;
pub const _SpiceSPK18Subtype_S18TP0: _SpiceSPK18Subtype = 0;
pub const _SpiceSPK18Subtype_S18TP1: _SpiceSPK18Subtype = 1;
pub type _SpiceSPK18Subtype = ::std::os::raw::c_uint;
pub use self::_SpiceSPK18Subtype as SpiceSPK18Subtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SpiceDLADescr {
    pub bwdptr: SpiceInt,
    pub fwdptr: SpiceInt,
    pub ibase: SpiceInt,
    pub isize_: SpiceInt,
    pub dbase: SpiceInt,
    pub dsize: SpiceInt,
    pub cbase: SpiceInt,
    pub csize: SpiceInt,
}
#[test]
fn bindgen_test_layout__SpiceDLADescr() {
    assert_eq!(
        ::std::mem::size_of::<_SpiceDLADescr>(),
        32usize,
        concat!("Size of: ", stringify!(_SpiceDLADescr))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpiceDLADescr>(),
        4usize,
        concat!("Alignment of ", stringify!(_SpiceDLADescr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).bwdptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(bwdptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).fwdptr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(fwdptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).ibase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(ibase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).isize_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(isize_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).dbase as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(dbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).dsize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(dsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).cbase as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(cbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDLADescr>())).csize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDLADescr),
            "::",
            stringify!(csize)
        )
    );
}
pub type SpiceDLADescr = _SpiceDLADescr;
pub type ConstSpiceDLADescr = SpiceDLADescr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SpiceDSKDescr {
    pub surfce: SpiceInt,
    pub center: SpiceInt,
    pub dclass: SpiceInt,
    pub dtype: SpiceInt,
    pub frmcde: SpiceInt,
    pub corsys: SpiceInt,
    pub corpar: [SpiceDouble; 10usize],
    pub co1min: SpiceDouble,
    pub co1max: SpiceDouble,
    pub co2min: SpiceDouble,
    pub co2max: SpiceDouble,
    pub co3min: SpiceDouble,
    pub co3max: SpiceDouble,
    pub start: SpiceDouble,
    pub stop: SpiceDouble,
}
#[test]
fn bindgen_test_layout__SpiceDSKDescr() {
    assert_eq!(
        ::std::mem::size_of::<_SpiceDSKDescr>(),
        168usize,
        concat!("Size of: ", stringify!(_SpiceDSKDescr))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpiceDSKDescr>(),
        8usize,
        concat!("Alignment of ", stringify!(_SpiceDSKDescr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).surfce as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(surfce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).center as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).dclass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(dclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).dtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).frmcde as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(frmcde)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).corsys as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(corsys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).corpar as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(corpar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).co1min as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(co1min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).co1max as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(co1max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).co2min as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(co2min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).co2max as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(co2max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).co3min as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(co3min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).co3max as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(co3max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).start as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceDSKDescr>())).stop as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceDSKDescr),
            "::",
            stringify!(stop)
        )
    );
}
pub type SpiceDSKDescr = _SpiceDSKDescr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SpicePlane {
    pub normal: [SpiceDouble; 3usize],
    pub constant: SpiceDouble,
}
#[test]
fn bindgen_test_layout__SpicePlane() {
    assert_eq!(
        ::std::mem::size_of::<_SpicePlane>(),
        32usize,
        concat!("Size of: ", stringify!(_SpicePlane))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpicePlane>(),
        8usize,
        concat!("Alignment of ", stringify!(_SpicePlane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpicePlane>())).normal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpicePlane),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpicePlane>())).constant as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpicePlane),
            "::",
            stringify!(constant)
        )
    );
}
pub type SpicePlane = _SpicePlane;
pub type ConstSpicePlane = SpicePlane;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SpiceEllipse {
    pub center: [SpiceDouble; 3usize],
    pub semiMajor: [SpiceDouble; 3usize],
    pub semiMinor: [SpiceDouble; 3usize],
}
#[test]
fn bindgen_test_layout__SpiceEllipse() {
    assert_eq!(
        ::std::mem::size_of::<_SpiceEllipse>(),
        72usize,
        concat!("Size of: ", stringify!(_SpiceEllipse))
    );
    assert_eq!(
        ::std::mem::align_of::<_SpiceEllipse>(),
        8usize,
        concat!("Alignment of ", stringify!(_SpiceEllipse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEllipse>())).center as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEllipse),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEllipse>())).semiMajor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEllipse),
            "::",
            stringify!(semiMajor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SpiceEllipse>())).semiMinor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SpiceEllipse),
            "::",
            stringify!(semiMinor)
        )
    );
}
pub type SpiceEllipse = _SpiceEllipse;
pub type ConstSpiceEllipse = SpiceEllipse;
extern "C" {
    pub fn appndc_c(item: *mut ConstSpiceChar, cell: *mut SpiceCell);
}
extern "C" {
    pub fn appndd_c(item: SpiceDouble, cell: *mut SpiceCell);
}
extern "C" {
    pub fn appndi_c(item: SpiceInt, cell: *mut SpiceCell);
}
extern "C" {
    pub fn axisar_c(axis: *mut ConstSpiceDouble, angle: SpiceDouble, r: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn badkpv_c(
        caller: *mut ConstSpiceChar,
        name: *mut ConstSpiceChar,
        comp: *mut ConstSpiceChar,
        size: SpiceInt,
        divby: SpiceInt,
        type_: SpiceChar,
    ) -> SpiceBoolean;
}
extern "C" {
    pub fn bltfrm_c(frmcls: SpiceInt, idset: *mut SpiceCell);
}
extern "C" {
    pub fn bodc2n_c(
        code: SpiceInt,
        namelen: SpiceInt,
        name: *mut SpiceChar,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn bodc2s_c(code: SpiceInt, lenout: SpiceInt, name: *mut SpiceChar);
}
extern "C" {
    pub fn boddef_c(name: *mut ConstSpiceChar, code: SpiceInt);
}
extern "C" {
    pub fn bodfnd_c(body: SpiceInt, item: *mut ConstSpiceChar) -> SpiceBoolean;
}
extern "C" {
    pub fn bodn2c_c(name: *mut ConstSpiceChar, code: *mut SpiceInt, found: *mut SpiceBoolean);
}
extern "C" {
    pub fn bods2c_c(name: *mut ConstSpiceChar, code: *mut SpiceInt, found: *mut SpiceBoolean);
}
extern "C" {
    pub fn bodvar_c(
        body: SpiceInt,
        item: *mut ConstSpiceChar,
        dim: *mut SpiceInt,
        values: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn bodvcd_c(
        body: SpiceInt,
        item: *mut ConstSpiceChar,
        maxn: SpiceInt,
        dim: *mut SpiceInt,
        values: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn bodvrd_c(
        body: *mut ConstSpiceChar,
        item: *mut ConstSpiceChar,
        maxn: SpiceInt,
        dim: *mut SpiceInt,
        values: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn brcktd_c(number: SpiceDouble, end1: SpiceDouble, end2: SpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn brckti_c(number: SpiceInt, end1: SpiceInt, end2: SpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn bschoc_c(
        value: *mut ConstSpiceChar,
        ndim: SpiceInt,
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
        order: *mut ConstSpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn bschoi_c(
        value: SpiceInt,
        ndim: SpiceInt,
        array: *mut ConstSpiceInt,
        order: *mut ConstSpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn bsrchc_c(
        value: *mut ConstSpiceChar,
        ndim: SpiceInt,
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
    ) -> SpiceInt;
}
extern "C" {
    pub fn bsrchd_c(value: SpiceDouble, ndim: SpiceInt, array: *mut ConstSpiceDouble) -> SpiceInt;
}
extern "C" {
    pub fn bsrchi_c(value: SpiceInt, ndim: SpiceInt, array: *mut ConstSpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn b1900_c() -> SpiceDouble;
}
extern "C" {
    pub fn b1950_c() -> SpiceDouble;
}
extern "C" {
    pub fn card_c(cell: *mut SpiceCell) -> SpiceInt;
}
extern "C" {
    pub fn ccifrm_c(
        frclss: SpiceInt,
        clssid: SpiceInt,
        lenout: SpiceInt,
        frcode: *mut SpiceInt,
        frname: *mut SpiceChar,
        center: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn cgv2el_c(
        center: *mut ConstSpiceDouble,
        vec1: *mut ConstSpiceDouble,
        vec2: *mut ConstSpiceDouble,
        ellipse: *mut SpiceEllipse,
    );
}
extern "C" {
    pub fn chbder_c(
        cp: *mut ConstSpiceDouble,
        degp: SpiceInt,
        x2s: *mut SpiceDouble,
        x: SpiceDouble,
        nderiv: SpiceInt,
        partdp: *mut SpiceDouble,
        dpdxs: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn chkin_c(module: *mut ConstSpiceChar);
}
extern "C" {
    pub fn chkout_c(module: *mut ConstSpiceChar);
}
extern "C" {
    pub fn cidfrm_c(
        cent: SpiceInt,
        lenout: SpiceInt,
        frcode: *mut SpiceInt,
        frname: *mut SpiceChar,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ckcls_c(handle: SpiceInt);
}
extern "C" {
    pub fn ckcov_c(
        ck: *mut ConstSpiceChar,
        idcode: SpiceInt,
        needav: SpiceBoolean,
        level: *mut ConstSpiceChar,
        tol: SpiceDouble,
        timsys: *mut ConstSpiceChar,
        cover: *mut SpiceCell,
    );
}
extern "C" {
    pub fn ckobj_c(ck: *mut ConstSpiceChar, ids: *mut SpiceCell);
}
extern "C" {
    pub fn ckgp_c(
        inst: SpiceInt,
        sclkdp: SpiceDouble,
        tol: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        cmat: *mut [SpiceDouble; 3usize],
        clkout: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ckgpav_c(
        inst: SpiceInt,
        sclkdp: SpiceDouble,
        tol: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        cmat: *mut [SpiceDouble; 3usize],
        av: *mut SpiceDouble,
        clkout: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn cklpf_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn ckopn_c(
        name: *mut ConstSpiceChar,
        ifname: *mut ConstSpiceChar,
        ncomch: SpiceInt,
        handle: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ckupf_c(handle: SpiceInt);
}
extern "C" {
    pub fn ckw01_c(
        handle: SpiceInt,
        begtime: SpiceDouble,
        endtime: SpiceDouble,
        inst: SpiceInt,
        ref_: *mut ConstSpiceChar,
        avflag: SpiceBoolean,
        segid: *mut ConstSpiceChar,
        nrec: SpiceInt,
        sclkdp: *mut ConstSpiceDouble,
        quats: *mut [ConstSpiceDouble; 4usize],
        avvs: *mut [ConstSpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn ckw02_c(
        handle: SpiceInt,
        begtim: SpiceDouble,
        endtim: SpiceDouble,
        inst: SpiceInt,
        ref_: *mut ConstSpiceChar,
        segid: *mut ConstSpiceChar,
        nrec: SpiceInt,
        start: *mut ConstSpiceDouble,
        stop: *mut ConstSpiceDouble,
        quats: *mut [ConstSpiceDouble; 4usize],
        avvs: *mut [ConstSpiceDouble; 3usize],
        rates: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn ckw03_c(
        handle: SpiceInt,
        begtim: SpiceDouble,
        endtim: SpiceDouble,
        inst: SpiceInt,
        ref_: *mut ConstSpiceChar,
        avflag: SpiceBoolean,
        segid: *mut ConstSpiceChar,
        nrec: SpiceInt,
        sclkdp: *mut ConstSpiceDouble,
        quats: *mut [ConstSpiceDouble; 4usize],
        avvs: *mut [ConstSpiceDouble; 3usize],
        nints: SpiceInt,
        starts: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn ckw05_c(
        handle: SpiceInt,
        subtyp: SpiceCK05Subtype,
        degree: SpiceInt,
        begtim: SpiceDouble,
        endtim: SpiceDouble,
        inst: SpiceInt,
        ref_: *mut ConstSpiceChar,
        avflag: SpiceBoolean,
        segid: *mut ConstSpiceChar,
        n: SpiceInt,
        sclkdp: *mut ConstSpiceDouble,
        packets: *const ::std::os::raw::c_void,
        rate: SpiceDouble,
        nints: SpiceInt,
        starts: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn cleard_c(ndim: SpiceInt, array: *mut SpiceDouble);
}
extern "C" {
    pub fn clight_c() -> SpiceDouble;
}
extern "C" {
    pub fn clpool_c();
}
extern "C" {
    pub fn cmprss_c(
        delim: SpiceChar,
        n: SpiceInt,
        input: *mut ConstSpiceChar,
        lenout: SpiceInt,
        output: *mut SpiceChar,
    );
}
extern "C" {
    pub fn cnmfrm_c(
        cname: *mut ConstSpiceChar,
        lenout: SpiceInt,
        frcode: *mut SpiceInt,
        frname: *mut SpiceChar,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn conics_c(elts: *mut ConstSpiceDouble, et: SpiceDouble, state: *mut SpiceDouble);
}
extern "C" {
    pub fn convrt_c(
        x: SpiceDouble,
        in_: *mut ConstSpiceChar,
        out: *mut ConstSpiceChar,
        y: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn copy_c(a: *mut SpiceCell, b: *mut SpiceCell);
}
extern "C" {
    pub fn cpos_c(
        str_: *mut ConstSpiceChar,
        chars: *mut ConstSpiceChar,
        start: SpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn cposr_c(
        str_: *mut ConstSpiceChar,
        chars: *mut ConstSpiceChar,
        start: SpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn cvpool_c(agent: *mut ConstSpiceChar, update: *mut SpiceBoolean);
}
extern "C" {
    pub fn cyllat_c(
        r: SpiceDouble,
        lonc: SpiceDouble,
        z: SpiceDouble,
        radius: *mut SpiceDouble,
        lon: *mut SpiceDouble,
        lat: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn cylrec_c(r: SpiceDouble, lon: SpiceDouble, z: SpiceDouble, rectan: *mut SpiceDouble);
}
extern "C" {
    pub fn cylsph_c(
        r: SpiceDouble,
        lonc: SpiceDouble,
        z: SpiceDouble,
        radius: *mut SpiceDouble,
        colat: *mut SpiceDouble,
        lon: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn dafac_c(
        handle: SpiceInt,
        n: SpiceInt,
        lenvals: SpiceInt,
        buffer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dafbbs_c(handle: SpiceInt);
}
extern "C" {
    pub fn dafbfs_c(handle: SpiceInt);
}
extern "C" {
    pub fn dafcls_c(handle: SpiceInt);
}
extern "C" {
    pub fn dafcs_c(handle: SpiceInt);
}
extern "C" {
    pub fn dafdc_c(handle: SpiceInt);
}
extern "C" {
    pub fn dafec_c(
        handle: SpiceInt,
        bufsiz: SpiceInt,
        lenout: SpiceInt,
        n: *mut SpiceInt,
        buffer: *mut ::std::os::raw::c_void,
        done: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn daffna_c(found: *mut SpiceBoolean);
}
extern "C" {
    pub fn daffpa_c(found: *mut SpiceBoolean);
}
extern "C" {
    pub fn dafgda_c(handle: SpiceInt, begin: SpiceInt, end: SpiceInt, data: *mut SpiceDouble);
}
extern "C" {
    pub fn dafgh_c(handle: *mut SpiceInt);
}
extern "C" {
    pub fn dafgn_c(lenout: SpiceInt, name: *mut SpiceChar);
}
extern "C" {
    pub fn dafgs_c(sum: *mut SpiceDouble);
}
extern "C" {
    pub fn dafgsr_c(
        handle: SpiceInt,
        recno: SpiceInt,
        begin: SpiceInt,
        end: SpiceInt,
        data: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dafopr_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn dafopw_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn dafps_c(
        nd: SpiceInt,
        ni: SpiceInt,
        dc: *mut ConstSpiceDouble,
        ic: *mut ConstSpiceInt,
        sum: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn dafrda_c(handle: SpiceInt, begin: SpiceInt, end: SpiceInt, data: *mut SpiceDouble);
}
extern "C" {
    pub fn dafrfr_c(
        handle: SpiceInt,
        lenout: SpiceInt,
        nd: *mut SpiceInt,
        ni: *mut SpiceInt,
        ifname: *mut SpiceChar,
        fward: *mut SpiceInt,
        bward: *mut SpiceInt,
        free: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dafrs_c(sum: *mut ConstSpiceDouble);
}
extern "C" {
    pub fn dafus_c(
        sum: *mut ConstSpiceDouble,
        nd: SpiceInt,
        ni: SpiceInt,
        dc: *mut SpiceDouble,
        ic: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dasac_c(
        handle: SpiceInt,
        n: SpiceInt,
        buflen: SpiceInt,
        buffer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dascls_c(handle: SpiceInt);
}
extern "C" {
    pub fn dasdc_c(handle: SpiceInt);
}
extern "C" {
    pub fn dasec_c(
        handle: SpiceInt,
        bufsiz: SpiceInt,
        buflen: SpiceInt,
        n: *mut SpiceInt,
        buffer: *mut ::std::os::raw::c_void,
        done: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dashfn_c(handle: SpiceInt, namlen: SpiceInt, fname: *mut SpiceChar);
}
extern "C" {
    pub fn dasopr_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn dasopw_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn dasrfr_c(
        handle: SpiceInt,
        idwlen: SpiceInt,
        ifnlen: SpiceInt,
        idword: *mut SpiceChar,
        ifname: *mut SpiceChar,
        nresvr: *mut SpiceInt,
        nresvc: *mut SpiceInt,
        ncomr: *mut SpiceInt,
        ncomc: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dcyldr_c(
        x: SpiceDouble,
        y: SpiceDouble,
        z: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn deltet_c(epoch: SpiceDouble, eptype: *mut ConstSpiceChar, delta: *mut SpiceDouble);
}
extern "C" {
    pub fn det_c(m1: *mut [ConstSpiceDouble; 3usize]) -> SpiceDouble;
}
extern "C" {
    pub fn diags2_c(
        symmat: *mut [ConstSpiceDouble; 2usize],
        diag: *mut [SpiceDouble; 2usize],
        rotate: *mut [SpiceDouble; 2usize],
    );
}
extern "C" {
    pub fn diff_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn dgeodr_c(
        x: SpiceDouble,
        y: SpiceDouble,
        z: SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn dlabbs_c(handle: SpiceInt, descr: *mut SpiceDLADescr, found: *mut SpiceBoolean);
}
extern "C" {
    pub fn dlabfs_c(handle: SpiceInt, descr: *mut SpiceDLADescr, found: *mut SpiceBoolean);
}
extern "C" {
    pub fn dlafns_c(
        handle: SpiceInt,
        descr: *mut ConstSpiceDLADescr,
        nxtdsc: *mut SpiceDLADescr,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dlafps_c(
        handle: SpiceInt,
        descr: *mut ConstSpiceDLADescr,
        prvdsc: *mut SpiceDLADescr,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dlatdr_c(
        x: SpiceDouble,
        y: SpiceDouble,
        z: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn dp2hx_c(
        number: SpiceDouble,
        lenout: SpiceInt,
        string: *mut SpiceChar,
        length: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dpgrdr_c(
        body: *mut ConstSpiceChar,
        x: SpiceDouble,
        y: SpiceDouble,
        z: SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn dpmax_c() -> SpiceDouble;
}
extern "C" {
    pub fn dpmin_c() -> SpiceDouble;
}
extern "C" {
    pub fn dpr_c() -> SpiceDouble;
}
extern "C" {
    pub fn drdcyl_c(
        r: SpiceDouble,
        lon: SpiceDouble,
        z: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn drdgeo_c(
        lon: SpiceDouble,
        lat: SpiceDouble,
        alt: SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn drdlat_c(
        r: SpiceDouble,
        lon: SpiceDouble,
        lat: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn drdpgr_c(
        body: *mut ConstSpiceChar,
        lon: SpiceDouble,
        lat: SpiceDouble,
        alt: SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn drdsph_c(
        r: SpiceDouble,
        colat: SpiceDouble,
        lon: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn dskb02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        nv: *mut SpiceInt,
        np: *mut SpiceInt,
        nvxtot: *mut SpiceInt,
        vtxbds: *mut [SpiceDouble; 2usize],
        voxsiz: *mut SpiceDouble,
        voxori: *mut SpiceDouble,
        vgrext: *mut SpiceInt,
        cgscal: *mut SpiceInt,
        vtxnpl: *mut SpiceInt,
        voxnpt: *mut SpiceInt,
        voxnpl: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dskcls_c(handle: SpiceInt, optmiz: SpiceBoolean);
}
extern "C" {
    pub fn dskd02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        item: SpiceInt,
        start: SpiceInt,
        room: SpiceInt,
        n: *mut SpiceInt,
        values: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn dskgd_c(handle: SpiceInt, dladsc: *mut ConstSpiceDLADescr, dskdsc: *mut SpiceDSKDescr);
}
extern "C" {
    pub fn dskgtl_c(keywrd: SpiceInt, dpval: *mut SpiceDouble);
}
extern "C" {
    pub fn dski02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        item: SpiceInt,
        start: SpiceInt,
        room: SpiceInt,
        n: *mut SpiceInt,
        values: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dskobj_c(dsk: *mut ConstSpiceChar, bodids: *mut SpiceCell);
}
extern "C" {
    pub fn dskopn_c(
        fname: *mut ConstSpiceChar,
        ifname: *mut ConstSpiceChar,
        ncomch: SpiceInt,
        handle: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dskn02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        plid: SpiceInt,
        normal: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn dskmi2_c(
        nv: SpiceInt,
        vrtces: *mut [ConstSpiceDouble; 3usize],
        np: SpiceInt,
        plates: *mut [ConstSpiceInt; 3usize],
        finscl: SpiceDouble,
        corscl: SpiceInt,
        worksz: SpiceInt,
        voxpsz: SpiceInt,
        voxlsz: SpiceInt,
        makvtl: SpiceBoolean,
        spxisz: SpiceInt,
        work: *mut [SpiceInt; 2usize],
        spaixd: *mut SpiceDouble,
        spaixi: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dskp02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        start: SpiceInt,
        room: SpiceInt,
        n: *mut SpiceInt,
        plates: *mut [SpiceInt; 3usize],
    );
}
extern "C" {
    pub fn dskrb2_c(
        nv: SpiceInt,
        vrtces: *mut [ConstSpiceDouble; 3usize],
        np: SpiceInt,
        plates: *mut [ConstSpiceInt; 3usize],
        corsys: SpiceInt,
        corpar: *mut ConstSpiceDouble,
        mncor3: *mut SpiceDouble,
        mxcor3: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn dsksrf_c(dsk: *mut ConstSpiceChar, bodyid: SpiceInt, srfids: *mut SpiceCell);
}
extern "C" {
    pub fn dskstl_c(keywrd: SpiceInt, dpval: SpiceDouble);
}
extern "C" {
    pub fn dskv02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        start: SpiceInt,
        room: SpiceInt,
        n: *mut SpiceInt,
        vrtces: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn dskw02_c(
        handle: SpiceInt,
        center: SpiceInt,
        surfce: SpiceInt,
        dclass: SpiceInt,
        frame: *mut ConstSpiceChar,
        corsys: SpiceInt,
        corpar: *mut ConstSpiceDouble,
        mncor1: SpiceDouble,
        mxcor1: SpiceDouble,
        mncor2: SpiceDouble,
        mxcor2: SpiceDouble,
        mncor3: SpiceDouble,
        mxcor3: SpiceDouble,
        first: SpiceDouble,
        last: SpiceDouble,
        nv: SpiceInt,
        vrtces: *mut [ConstSpiceDouble; 3usize],
        np: SpiceInt,
        plates: *mut [ConstSpiceInt; 3usize],
        spaixd: *mut ConstSpiceDouble,
        spaixi: *mut ConstSpiceInt,
    );
}
extern "C" {
    pub fn dskx02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        vertex: *mut ConstSpiceDouble,
        raydir: *mut ConstSpiceDouble,
        plid: *mut SpiceInt,
        xpt: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dskxsi_c(
        pri: SpiceBoolean,
        target: *mut ConstSpiceChar,
        nsurf: SpiceInt,
        srflst: *mut ConstSpiceInt,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        vertex: *mut ConstSpiceDouble,
        raydir: *mut ConstSpiceDouble,
        maxd: SpiceInt,
        maxi: SpiceInt,
        xpt: *mut SpiceDouble,
        handle: *mut SpiceInt,
        dladsc: *mut SpiceDLADescr,
        dskdsc: *mut SpiceDSKDescr,
        dc: *mut SpiceDouble,
        ic: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dskxv_c(
        pri: SpiceBoolean,
        target: *mut ConstSpiceChar,
        nsurf: SpiceInt,
        srflst: *mut ConstSpiceInt,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        nrays: SpiceInt,
        vtxarr: *mut [ConstSpiceDouble; 3usize],
        dirarr: *mut [ConstSpiceDouble; 3usize],
        xptarr: *mut [SpiceDouble; 3usize],
        fndarr: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn dskz02_c(
        handle: SpiceInt,
        dladsc: *mut ConstSpiceDLADescr,
        nv: *mut SpiceInt,
        np: *mut SpiceInt,
    );
}
extern "C" {
    pub fn dsphdr_c(
        x: SpiceDouble,
        y: SpiceDouble,
        z: SpiceDouble,
        jacobi: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn dtpool_c(
        name: *mut ConstSpiceChar,
        found: *mut SpiceBoolean,
        n: *mut SpiceInt,
        type_: *mut SpiceChar,
    );
}
extern "C" {
    pub fn ducrss_c(s1: *mut ConstSpiceDouble, s2: *mut ConstSpiceDouble, sout: *mut SpiceDouble);
}
extern "C" {
    pub fn dvcrss_c(s1: *mut ConstSpiceDouble, s2: *mut ConstSpiceDouble, sout: *mut SpiceDouble);
}
extern "C" {
    pub fn dvdot_c(s1: *mut ConstSpiceDouble, s2: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn dvhat_c(s1: *mut ConstSpiceDouble, sout: *mut SpiceDouble);
}
extern "C" {
    pub fn dvnorm_c(state: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn dvpool_c(name: *mut ConstSpiceChar);
}
extern "C" {
    pub fn dvsep_c(s1: *mut ConstSpiceDouble, s2: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn edlimb_c(
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        viewpt: *mut ConstSpiceDouble,
        limb: *mut SpiceEllipse,
    );
}
extern "C" {
    pub fn edterm_c(
        trmtyp: *mut ConstSpiceChar,
        source: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixfrm: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        npts: SpiceInt,
        trgepc: *mut SpiceDouble,
        obspos: *mut SpiceDouble,
        termpts: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn ekacec_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: SpiceInt,
        vallen: SpiceInt,
        cvals: *const ::std::os::raw::c_void,
        isnull: SpiceBoolean,
    );
}
extern "C" {
    pub fn ekaced_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: SpiceInt,
        dvals: *mut ConstSpiceDouble,
        isnull: SpiceBoolean,
    );
}
extern "C" {
    pub fn ekacei_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: SpiceInt,
        ivals: *mut ConstSpiceInt,
        isnull: SpiceBoolean,
    );
}
extern "C" {
    pub fn ekaclc_c(
        handle: SpiceInt,
        segno: SpiceInt,
        column: *mut ConstSpiceChar,
        vallen: SpiceInt,
        cvals: *const ::std::os::raw::c_void,
        entszs: *mut ConstSpiceInt,
        nlflgs: *mut ConstSpiceBoolean,
        rcptrs: *mut ConstSpiceInt,
        wkindx: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ekacld_c(
        handle: SpiceInt,
        segno: SpiceInt,
        column: *mut ConstSpiceChar,
        dvals: *mut ConstSpiceDouble,
        entszs: *mut ConstSpiceInt,
        nlflgs: *mut ConstSpiceBoolean,
        rcptrs: *mut ConstSpiceInt,
        wkindx: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ekacli_c(
        handle: SpiceInt,
        segno: SpiceInt,
        column: *mut ConstSpiceChar,
        ivals: *mut ConstSpiceInt,
        entszs: *mut ConstSpiceInt,
        nlflgs: *mut ConstSpiceBoolean,
        rcptrs: *mut ConstSpiceInt,
        wkindx: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ekappr_c(handle: SpiceInt, segno: SpiceInt, recno: *mut SpiceInt);
}
extern "C" {
    pub fn ekbseg_c(
        handle: SpiceInt,
        tabnam: *mut ConstSpiceChar,
        ncols: SpiceInt,
        cnmlen: SpiceInt,
        cnames: *const ::std::os::raw::c_void,
        declen: SpiceInt,
        decls: *const ::std::os::raw::c_void,
        segno: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ekccnt_c(table: *mut ConstSpiceChar, ccount: *mut SpiceInt);
}
extern "C" {
    pub fn ekcii_c(
        table: *mut ConstSpiceChar,
        cindex: SpiceInt,
        lenout: SpiceInt,
        column: *mut SpiceChar,
        attdsc: *mut SpiceEKAttDsc,
    );
}
extern "C" {
    pub fn ekcls_c(handle: SpiceInt);
}
extern "C" {
    pub fn ekdelr_c(handle: SpiceInt, segno: SpiceInt, recno: SpiceInt);
}
extern "C" {
    pub fn ekffld_c(handle: SpiceInt, segno: SpiceInt, rcptrs: *mut SpiceInt);
}
extern "C" {
    pub fn ekfind_c(
        query: *mut ConstSpiceChar,
        lenout: SpiceInt,
        nmrows: *mut SpiceInt,
        error: *mut SpiceBoolean,
        errmsg: *mut SpiceChar,
    );
}
extern "C" {
    pub fn ekgc_c(
        selidx: SpiceInt,
        row: SpiceInt,
        elment: SpiceInt,
        lenout: SpiceInt,
        cdata: *mut SpiceChar,
        null: *mut SpiceBoolean,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ekgd_c(
        selidx: SpiceInt,
        row: SpiceInt,
        elment: SpiceInt,
        ddata: *mut SpiceDouble,
        null: *mut SpiceBoolean,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ekgi_c(
        selidx: SpiceInt,
        row: SpiceInt,
        elment: SpiceInt,
        idata: *mut SpiceInt,
        null: *mut SpiceBoolean,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ekifld_c(
        handle: SpiceInt,
        tabnam: *mut ConstSpiceChar,
        ncols: SpiceInt,
        nrows: SpiceInt,
        cnmlen: SpiceInt,
        cnames: *const ::std::os::raw::c_void,
        declen: SpiceInt,
        decls: *const ::std::os::raw::c_void,
        segno: *mut SpiceInt,
        rcptrs: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ekinsr_c(handle: SpiceInt, segno: SpiceInt, recno: SpiceInt);
}
extern "C" {
    pub fn eklef_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn eknelt_c(selidx: SpiceInt, row: SpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn eknseg_c(handle: SpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn ekntab_c(n: *mut SpiceInt);
}
extern "C" {
    pub fn ekopn_c(
        fname: *mut ConstSpiceChar,
        ifname: *mut ConstSpiceChar,
        ncomch: SpiceInt,
        handle: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ekopr_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn ekops_c(handle: *mut SpiceInt);
}
extern "C" {
    pub fn ekopw_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn ekpsel_c(
        query: *mut ConstSpiceChar,
        msglen: SpiceInt,
        tablen: SpiceInt,
        collen: SpiceInt,
        n: *mut SpiceInt,
        xbegs: *mut SpiceInt,
        xends: *mut SpiceInt,
        xtypes: *mut SpiceEKDataType,
        xclass: *mut SpiceEKExprClass,
        tabs: *mut ::std::os::raw::c_void,
        cols: *mut ::std::os::raw::c_void,
        error: *mut SpiceBoolean,
        errmsg: *mut SpiceChar,
    );
}
extern "C" {
    pub fn ekrcec_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        lenout: SpiceInt,
        nvals: *mut SpiceInt,
        cvals: *mut ::std::os::raw::c_void,
        isnull: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ekrced_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: *mut SpiceInt,
        dvals: *mut SpiceDouble,
        isnull: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ekrcei_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: *mut SpiceInt,
        ivals: *mut SpiceInt,
        isnull: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ekssum_c(handle: SpiceInt, segno: SpiceInt, segsum: *mut SpiceEKSegSum);
}
extern "C" {
    pub fn ektnam_c(n: SpiceInt, lenout: SpiceInt, table: *mut SpiceChar);
}
extern "C" {
    pub fn ekucec_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: SpiceInt,
        vallen: SpiceInt,
        cvals: *const ::std::os::raw::c_void,
        isnull: SpiceBoolean,
    );
}
extern "C" {
    pub fn ekuced_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: SpiceInt,
        dvals: *mut ConstSpiceDouble,
        isnull: SpiceBoolean,
    );
}
extern "C" {
    pub fn ekucei_c(
        handle: SpiceInt,
        segno: SpiceInt,
        recno: SpiceInt,
        column: *mut ConstSpiceChar,
        nvals: SpiceInt,
        ivals: *mut ConstSpiceInt,
        isnull: SpiceBoolean,
    );
}
extern "C" {
    pub fn ekuef_c(handle: SpiceInt);
}
extern "C" {
    pub fn elemc_c(item: *mut ConstSpiceChar, set: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn elemd_c(item: SpiceDouble, set: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn elemi_c(item: SpiceInt, set: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn eqncpv_c(
        et: SpiceDouble,
        epoch: SpiceDouble,
        eqel: *mut ConstSpiceDouble,
        rapol: SpiceDouble,
        decpol: SpiceDouble,
        state: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn eqstr_c(a: *mut ConstSpiceChar, b: *mut ConstSpiceChar) -> SpiceBoolean;
}
extern "C" {
    pub fn el2cgv_c(
        ellipse: *mut ConstSpiceEllipse,
        center: *mut SpiceDouble,
        smajor: *mut SpiceDouble,
        sminor: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn erract_c(operation: *mut ConstSpiceChar, lenout: SpiceInt, action: *mut SpiceChar);
}
extern "C" {
    pub fn errch_c(marker: *mut ConstSpiceChar, string: *mut ConstSpiceChar);
}
extern "C" {
    pub fn errdev_c(operation: *mut ConstSpiceChar, lenout: SpiceInt, device: *mut SpiceChar);
}
extern "C" {
    pub fn errdp_c(marker: *mut ConstSpiceChar, number: SpiceDouble);
}
extern "C" {
    pub fn errint_c(marker: *mut ConstSpiceChar, number: SpiceInt);
}
extern "C" {
    pub fn errprt_c(operation: *mut ConstSpiceChar, lenout: SpiceInt, list: *mut SpiceChar);
}
extern "C" {
    pub fn esrchc_c(
        value: *mut ConstSpiceChar,
        ndim: SpiceInt,
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
    ) -> SpiceInt;
}
extern "C" {
    pub fn etcal_c(et: SpiceDouble, lenout: SpiceInt, string: *mut SpiceChar);
}
extern "C" {
    pub fn et2lst_c(
        et: SpiceDouble,
        body: SpiceInt,
        lon: SpiceDouble,
        type_: *mut ConstSpiceChar,
        timlen: SpiceInt,
        ampmlen: SpiceInt,
        hr: *mut SpiceInt,
        mn: *mut SpiceInt,
        sc: *mut SpiceInt,
        time: *mut SpiceChar,
        ampm: *mut SpiceChar,
    );
}
extern "C" {
    pub fn et2utc_c(
        et: SpiceDouble,
        format: *mut ConstSpiceChar,
        prec: SpiceInt,
        lenout: SpiceInt,
        utcstr: *mut SpiceChar,
    );
}
extern "C" {
    pub fn eul2m_c(
        angle3: SpiceDouble,
        angle2: SpiceDouble,
        angle1: SpiceDouble,
        axis3: SpiceInt,
        axis2: SpiceInt,
        axis1: SpiceInt,
        r: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn eul2xf_c(
        eulang: *mut ConstSpiceDouble,
        axisa: SpiceInt,
        axisb: SpiceInt,
        axisc: SpiceInt,
        xform: *mut [SpiceDouble; 6usize],
    );
}
extern "C" {
    pub fn exists_c(name: *mut ConstSpiceChar) -> SpiceBoolean;
}
extern "C" {
    pub fn expool_c(name: *mut ConstSpiceChar, found: *mut SpiceBoolean);
}
extern "C" {
    pub fn failed_c() -> SpiceBoolean;
}
extern "C" {
    pub fn fovray_c(
        inst: *mut ConstSpiceChar,
        raydir: *mut ConstSpiceDouble,
        rframe: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        et: *mut SpiceDouble,
        visible: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn fovtrg_c(
        inst: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        tshape: *mut ConstSpiceChar,
        tframe: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        et: *mut SpiceDouble,
        visible: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn frame_c(x: *mut SpiceDouble, y: *mut SpiceDouble, z: *mut SpiceDouble);
}
extern "C" {
    pub fn frinfo_c(
        frcode: SpiceInt,
        cent: *mut SpiceInt,
        clss: *mut SpiceInt,
        clssid: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn frmnam_c(frcode: SpiceInt, lenout: SpiceInt, frname: *mut SpiceChar);
}
extern "C" {
    pub fn ftncls_c(unit: SpiceInt);
}
extern "C" {
    pub fn furnsh_c(file: *mut ConstSpiceChar);
}
extern "C" {
    pub fn gcpool_c(
        name: *mut ConstSpiceChar,
        start: SpiceInt,
        room: SpiceInt,
        lenout: SpiceInt,
        n: *mut SpiceInt,
        cvals: *mut ::std::os::raw::c_void,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn gdpool_c(
        name: *mut ConstSpiceChar,
        start: SpiceInt,
        room: SpiceInt,
        n: *mut SpiceInt,
        values: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn georec_c(
        lon: SpiceDouble,
        lat: SpiceDouble,
        alt: SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        rectan: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn getcml_c(argc: *mut SpiceInt, argv: *mut *mut *mut SpiceChar);
}
extern "C" {
    pub fn getelm_c(
        frstyr: SpiceInt,
        lineln: SpiceInt,
        lines: *const ::std::os::raw::c_void,
        epoch: *mut SpiceDouble,
        elems: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn getfat_c(
        file: *mut ConstSpiceChar,
        arclen: SpiceInt,
        typlen: SpiceInt,
        arch: *mut SpiceChar,
        type_: *mut SpiceChar,
    );
}
extern "C" {
    pub fn getfov_c(
        instid: SpiceInt,
        room: SpiceInt,
        shapelen: SpiceInt,
        framelen: SpiceInt,
        shape: *mut SpiceChar,
        frame: *mut SpiceChar,
        bsight: *mut SpiceDouble,
        n: *mut SpiceInt,
        bounds: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn getmsg_c(option: *mut ConstSpiceChar, lenout: SpiceInt, msg: *mut SpiceChar);
}
extern "C" {
    pub fn gfbail_c() -> SpiceBoolean;
}
extern "C" {
    pub fn gfclrh_c();
}
extern "C" {
    pub fn gfdist_c(
        target: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfevnt_c(
        udstep: ::std::option::Option<
            unsafe extern "C" fn(et: SpiceDouble, step: *mut SpiceDouble),
        >,
        udrefn: ::std::option::Option<
            unsafe extern "C" fn(
                t1: SpiceDouble,
                t2: SpiceDouble,
                s1: SpiceBoolean,
                s2: SpiceBoolean,
                t: *mut SpiceDouble,
            ),
        >,
        gquant: *mut ConstSpiceChar,
        qnpars: SpiceInt,
        lenvals: SpiceInt,
        qpnams: *const ::std::os::raw::c_void,
        qcpars: *const ::std::os::raw::c_void,
        qdpars: *mut ConstSpiceDouble,
        qipars: *mut ConstSpiceInt,
        qlpars: *mut ConstSpiceBoolean,
        op: *mut ConstSpiceChar,
        refval: SpiceDouble,
        tol: SpiceDouble,
        adjust: SpiceDouble,
        rpt: SpiceBoolean,
        udrepi: ::std::option::Option<
            unsafe extern "C" fn(
                cnfine: *mut SpiceCell,
                srcpre: *mut ConstSpiceChar,
                srcsuf: *mut ConstSpiceChar,
            ),
        >,
        udrepu: ::std::option::Option<
            unsafe extern "C" fn(ivbeg: SpiceDouble, ivend: SpiceDouble, et: SpiceDouble),
        >,
        udrepf: ::std::option::Option<unsafe extern "C" fn()>,
        nintvls: SpiceInt,
        bail: SpiceBoolean,
        udbail: ::std::option::Option<unsafe extern "C" fn() -> SpiceBoolean>,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gffove_c(
        inst: *mut ConstSpiceChar,
        tshape: *mut ConstSpiceChar,
        raydir: *mut ConstSpiceDouble,
        target: *mut ConstSpiceChar,
        tframe: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        tol: SpiceDouble,
        udstep: ::std::option::Option<
            unsafe extern "C" fn(et: SpiceDouble, step: *mut SpiceDouble),
        >,
        udrefn: ::std::option::Option<
            unsafe extern "C" fn(
                t1: SpiceDouble,
                t2: SpiceDouble,
                s1: SpiceBoolean,
                s2: SpiceBoolean,
                t: *mut SpiceDouble,
            ),
        >,
        rpt: SpiceBoolean,
        udrepi: ::std::option::Option<
            unsafe extern "C" fn(
                cnfine: *mut SpiceCell,
                srcpre: *mut ConstSpiceChar,
                srcsuf: *mut ConstSpiceChar,
            ),
        >,
        udrepu: ::std::option::Option<
            unsafe extern "C" fn(ivbeg: SpiceDouble, ivend: SpiceDouble, et: SpiceDouble),
        >,
        udrepf: ::std::option::Option<unsafe extern "C" fn()>,
        bail: SpiceBoolean,
        udbail: ::std::option::Option<unsafe extern "C" fn() -> SpiceBoolean>,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfilum_c(
        method: *mut ConstSpiceChar,
        angtyp: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        illum: *mut ConstSpiceChar,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut ConstSpiceDouble,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfinth_c(sigcode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gfocce_c(
        occtyp: *mut ConstSpiceChar,
        front: *mut ConstSpiceChar,
        fshape: *mut ConstSpiceChar,
        fframe: *mut ConstSpiceChar,
        back: *mut ConstSpiceChar,
        bshape: *mut ConstSpiceChar,
        bframe: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        tol: SpiceDouble,
        udstep: ::std::option::Option<
            unsafe extern "C" fn(et: SpiceDouble, step: *mut SpiceDouble),
        >,
        udrefn: ::std::option::Option<
            unsafe extern "C" fn(
                t1: SpiceDouble,
                t2: SpiceDouble,
                s1: SpiceBoolean,
                s2: SpiceBoolean,
                t: *mut SpiceDouble,
            ),
        >,
        rpt: SpiceBoolean,
        udrepi: ::std::option::Option<
            unsafe extern "C" fn(
                cnfine: *mut SpiceCell,
                srcpre: *mut ConstSpiceChar,
                srcsuf: *mut ConstSpiceChar,
            ),
        >,
        udrepu: ::std::option::Option<
            unsafe extern "C" fn(ivbeg: SpiceDouble, ivend: SpiceDouble, et: SpiceDouble),
        >,
        udrepf: ::std::option::Option<unsafe extern "C" fn()>,
        bail: SpiceBoolean,
        udbail: ::std::option::Option<unsafe extern "C" fn() -> SpiceBoolean>,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfoclt_c(
        occtyp: *mut ConstSpiceChar,
        front: *mut ConstSpiceChar,
        fshape: *mut ConstSpiceChar,
        fframe: *mut ConstSpiceChar,
        back: *mut ConstSpiceChar,
        bshape: *mut ConstSpiceChar,
        bframe: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        step: SpiceDouble,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfpa_c(
        target: *mut ConstSpiceChar,
        illum: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfposc_c(
        target: *mut ConstSpiceChar,
        frame: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        crdsys: *mut ConstSpiceChar,
        coord: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfrefn_c(
        t1: SpiceDouble,
        t2: SpiceDouble,
        s1: SpiceBoolean,
        s2: SpiceBoolean,
        t: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn gfrepf_c();
}
extern "C" {
    pub fn gfrepi_c(
        window: *mut SpiceCell,
        begmss: *mut ConstSpiceChar,
        endmss: *mut ConstSpiceChar,
    );
}
extern "C" {
    pub fn gfrepu_c(ivbeg: SpiceDouble, ivend: SpiceDouble, time: SpiceDouble);
}
extern "C" {
    pub fn gfrfov_c(
        inst: *mut ConstSpiceChar,
        raydir: *mut ConstSpiceDouble,
        rframe: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        step: SpiceDouble,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfrr_c(
        target: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfsep_c(
        targ1: *mut ConstSpiceChar,
        shape1: *mut ConstSpiceChar,
        frame1: *mut ConstSpiceChar,
        targ2: *mut ConstSpiceChar,
        shape2: *mut ConstSpiceChar,
        frame2: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfsntc_c(
        target: *mut ConstSpiceChar,
        fixref: *mut ConstSpiceChar,
        method: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        dref: *mut ConstSpiceChar,
        dvec: *mut ConstSpiceDouble,
        crdsys: *mut ConstSpiceChar,
        coord: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfsstp_c(step: SpiceDouble);
}
extern "C" {
    pub fn gfstep_c(time: SpiceDouble, step: *mut SpiceDouble);
}
extern "C" {
    pub fn gfstol_c(value: SpiceDouble);
}
extern "C" {
    pub fn gfsubc_c(
        target: *mut ConstSpiceChar,
        fixref: *mut ConstSpiceChar,
        method: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        crdsys: *mut ConstSpiceChar,
        coord: *mut ConstSpiceChar,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gftfov_c(
        inst: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        tshape: *mut ConstSpiceChar,
        tframe: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        step: SpiceDouble,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfudb_c(
        udfuns: ::std::option::Option<
            unsafe extern "C" fn(et: SpiceDouble, value: *mut SpiceDouble),
        >,
        udfunb: ::std::option::Option<
            unsafe extern "C" fn(
                udfuns: ::std::option::Option<
                    unsafe extern "C" fn(et: SpiceDouble, value: *mut SpiceDouble),
                >,
                et: SpiceDouble,
                xbool: *mut SpiceBoolean,
            ),
        >,
        step: SpiceDouble,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gfuds_c(
        udfuns: ::std::option::Option<
            unsafe extern "C" fn(et: SpiceDouble, value: *mut SpiceDouble),
        >,
        udfunb: ::std::option::Option<
            unsafe extern "C" fn(
                udfuns: ::std::option::Option<
                    unsafe extern "C" fn(et: SpiceDouble, value: *mut SpiceDouble),
                >,
                x: SpiceDouble,
                xbool: *mut SpiceBoolean,
            ),
        >,
        relate: *mut ConstSpiceChar,
        refval: SpiceDouble,
        adjust: SpiceDouble,
        step: SpiceDouble,
        nintvls: SpiceInt,
        cnfine: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn gipool_c(
        name: *mut ConstSpiceChar,
        start: SpiceInt,
        room: SpiceInt,
        n: *mut SpiceInt,
        ivals: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn gnpool_c(
        name: *mut ConstSpiceChar,
        start: SpiceInt,
        room: SpiceInt,
        lenout: SpiceInt,
        n: *mut SpiceInt,
        kvars: *mut ::std::os::raw::c_void,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn hrmint_c(
        n: SpiceInt,
        xvals: *mut ConstSpiceDouble,
        yvals: *mut ConstSpiceDouble,
        x: SpiceDouble,
        work: *mut SpiceDouble,
        f: *mut SpiceDouble,
        df: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn halfpi_c() -> SpiceDouble;
}
extern "C" {
    pub fn hx2dp_c(
        string: *mut ConstSpiceChar,
        lenout: SpiceInt,
        number: *mut SpiceDouble,
        error: *mut SpiceBoolean,
        errmsg: *mut SpiceChar,
    );
}
extern "C" {
    pub fn ident_c(matrix: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn ilumin_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut ConstSpiceDouble,
        trgepc: *mut SpiceDouble,
        srfvec: *mut SpiceDouble,
        phase: *mut SpiceDouble,
        solar: *mut SpiceDouble,
        emissn: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn illum_c(
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut ConstSpiceDouble,
        phase: *mut SpiceDouble,
        solar: *mut SpiceDouble,
        emissn: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn illumf_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        ilusrc: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut ConstSpiceDouble,
        trgepc: *mut SpiceDouble,
        srfvec: *mut SpiceDouble,
        phase: *mut SpiceDouble,
        incdnc: *mut SpiceDouble,
        emissn: *mut SpiceDouble,
        visibl: *mut SpiceBoolean,
        lit: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn illumg_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        illum: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut ConstSpiceDouble,
        trgepc: *mut SpiceDouble,
        srfvec: *mut SpiceDouble,
        phase: *mut SpiceDouble,
        solar: *mut SpiceDouble,
        emissn: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn inedpl_c(
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        plane: *mut ConstSpicePlane,
        ellipse: *mut SpiceEllipse,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn inelpl_c(
        ellips: *mut ConstSpiceEllipse,
        plane: *mut ConstSpicePlane,
        nxpts: *mut SpiceInt,
        xpt1: *mut SpiceDouble,
        xpt2: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn insrtc_c(item: *mut ConstSpiceChar, set: *mut SpiceCell);
}
extern "C" {
    pub fn insrtd_c(item: SpiceDouble, set: *mut SpiceCell);
}
extern "C" {
    pub fn insrti_c(item: SpiceInt, set: *mut SpiceCell);
}
extern "C" {
    pub fn inter_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn inrypl_c(
        vertex: *mut ConstSpiceDouble,
        dir: *mut ConstSpiceDouble,
        plane: *mut ConstSpicePlane,
        nxpts: *mut SpiceInt,
        xpt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn intmax_c() -> SpiceInt;
}
extern "C" {
    pub fn intmin_c() -> SpiceInt;
}
extern "C" {
    pub fn invert_c(m1: *mut [ConstSpiceDouble; 3usize], m2: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn invort_c(m: *mut [ConstSpiceDouble; 3usize], mit: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn isordv_c(array: *mut ConstSpiceInt, n: SpiceInt) -> SpiceBoolean;
}
extern "C" {
    pub fn isrot_c(
        m: *mut [ConstSpiceDouble; 3usize],
        ntol: SpiceDouble,
        dtol: SpiceDouble,
    ) -> SpiceBoolean;
}
extern "C" {
    pub fn isrchc_c(
        value: *mut ConstSpiceChar,
        ndim: SpiceInt,
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
    ) -> SpiceInt;
}
extern "C" {
    pub fn isrchd_c(value: SpiceDouble, ndim: SpiceInt, array: *mut ConstSpiceDouble) -> SpiceInt;
}
extern "C" {
    pub fn isrchi_c(value: SpiceInt, ndim: SpiceInt, array: *mut ConstSpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn iswhsp_c(string: *mut ConstSpiceChar) -> SpiceBoolean;
}
extern "C" {
    pub fn j1900_c() -> SpiceDouble;
}
extern "C" {
    pub fn j1950_c() -> SpiceDouble;
}
extern "C" {
    pub fn j2000_c() -> SpiceDouble;
}
extern "C" {
    pub fn j2100_c() -> SpiceDouble;
}
extern "C" {
    pub fn jyear_c() -> SpiceDouble;
}
extern "C" {
    pub fn kclear_c();
}
extern "C" {
    pub fn kdata_c(
        which: SpiceInt,
        kind: *mut ConstSpiceChar,
        fillen: SpiceInt,
        typlen: SpiceInt,
        srclen: SpiceInt,
        file: *mut SpiceChar,
        filtyp: *mut SpiceChar,
        source: *mut SpiceChar,
        handle: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn kinfo_c(
        file: *mut ConstSpiceChar,
        typlen: SpiceInt,
        srclen: SpiceInt,
        filtyp: *mut SpiceChar,
        source: *mut SpiceChar,
        handle: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn kplfrm_c(frmcls: SpiceInt, idset: *mut SpiceCell);
}
extern "C" {
    pub fn ktotal_c(kind: *mut ConstSpiceChar, count: *mut SpiceInt);
}
extern "C" {
    pub fn kxtrct_c(
        keywd: *mut ConstSpiceChar,
        termlen: SpiceInt,
        terms: *const ::std::os::raw::c_void,
        nterms: SpiceInt,
        stringlen: SpiceInt,
        substrlen: SpiceInt,
        string: *mut SpiceChar,
        found: *mut SpiceBoolean,
        substr: *mut SpiceChar,
    );
}
extern "C" {
    pub fn lastnb_c(string: *mut ConstSpiceChar) -> SpiceInt;
}
extern "C" {
    pub fn latcyl_c(
        radius: SpiceDouble,
        lon: SpiceDouble,
        lat: SpiceDouble,
        r: *mut SpiceDouble,
        lonc: *mut SpiceDouble,
        z: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn latrec_c(
        radius: SpiceDouble,
        longitude: SpiceDouble,
        latitude: SpiceDouble,
        rectan: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn latsph_c(
        radius: SpiceDouble,
        lon: SpiceDouble,
        lat: SpiceDouble,
        rho: *mut SpiceDouble,
        colat: *mut SpiceDouble,
        lons: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn latsrf_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        npts: SpiceInt,
        lonlat: *mut [ConstSpiceDouble; 2usize],
        srfpts: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn lcase_c(in_: *mut SpiceChar, lenout: SpiceInt, out: *mut SpiceChar);
}
extern "C" {
    pub fn ldpool_c(filename: *mut ConstSpiceChar);
}
extern "C" {
    pub fn lgrind_c(
        n: SpiceInt,
        xvals: *mut ConstSpiceDouble,
        yvals: *mut ConstSpiceDouble,
        work: *mut SpiceDouble,
        x: SpiceDouble,
        p: *mut SpiceDouble,
        dp: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn limbpt_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        corloc: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        refvec: *mut ConstSpiceDouble,
        rolstp: SpiceDouble,
        ncuts: SpiceInt,
        schstp: SpiceDouble,
        soltol: SpiceDouble,
        maxn: SpiceInt,
        npts: *mut SpiceInt,
        points: *mut [SpiceDouble; 3usize],
        epochs: *mut SpiceDouble,
        tangts: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn lmpool_c(cvals: *const ::std::os::raw::c_void, lenvals: SpiceInt, n: SpiceInt);
}
extern "C" {
    pub fn lparse_c(
        list: *mut ConstSpiceChar,
        delim: *mut ConstSpiceChar,
        nmax: SpiceInt,
        lenout: SpiceInt,
        n: *mut SpiceInt,
        items: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn lparsm_c(
        list: *mut ConstSpiceChar,
        delims: *mut ConstSpiceChar,
        nmax: SpiceInt,
        lenout: SpiceInt,
        n: *mut SpiceInt,
        items: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn lparss_c(list: *mut ConstSpiceChar, delims: *mut ConstSpiceChar, set: *mut SpiceCell);
}
extern "C" {
    pub fn lspcn_c(
        body: *mut ConstSpiceChar,
        et: SpiceDouble,
        abcorr: *mut ConstSpiceChar,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn lstlec_c(
        string: *mut ConstSpiceChar,
        n: SpiceInt,
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
    ) -> SpiceInt;
}
extern "C" {
    pub fn lstled_c(x: SpiceDouble, n: SpiceInt, array: *mut ConstSpiceDouble) -> SpiceInt;
}
extern "C" {
    pub fn lstlei_c(x: SpiceInt, n: SpiceInt, array: *mut ConstSpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn lstltc_c(
        string: *mut ConstSpiceChar,
        n: SpiceInt,
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
    ) -> SpiceInt;
}
extern "C" {
    pub fn lstltd_c(x: SpiceDouble, n: SpiceInt, array: *mut ConstSpiceDouble) -> SpiceInt;
}
extern "C" {
    pub fn lstlti_c(x: SpiceInt, n: SpiceInt, array: *mut ConstSpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn ltime_c(
        etobs: SpiceDouble,
        obs: SpiceInt,
        dir: *mut ConstSpiceChar,
        targ: SpiceInt,
        ettarg: *mut SpiceDouble,
        elapsd: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn lx4dec_c(
        string: *mut ConstSpiceChar,
        first: SpiceInt,
        last: *mut SpiceInt,
        nchar: *mut SpiceInt,
    );
}
extern "C" {
    pub fn lx4num_c(
        string: *mut ConstSpiceChar,
        first: SpiceInt,
        last: *mut SpiceInt,
        nchar: *mut SpiceInt,
    );
}
extern "C" {
    pub fn lx4sgn_c(
        string: *mut ConstSpiceChar,
        first: SpiceInt,
        last: *mut SpiceInt,
        nchar: *mut SpiceInt,
    );
}
extern "C" {
    pub fn lx4uns_c(
        string: *mut ConstSpiceChar,
        first: SpiceInt,
        last: *mut SpiceInt,
        nchar: *mut SpiceInt,
    );
}
extern "C" {
    pub fn lxqstr_c(
        string: *mut ConstSpiceChar,
        qchar: SpiceChar,
        first: SpiceInt,
        last: *mut SpiceInt,
        nchar: *mut SpiceInt,
    );
}
extern "C" {
    pub fn m2eul_c(
        r: *mut [ConstSpiceDouble; 3usize],
        axis3: SpiceInt,
        axis2: SpiceInt,
        axis1: SpiceInt,
        angle3: *mut SpiceDouble,
        angle2: *mut SpiceDouble,
        angle1: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn m2q_c(r: *mut [ConstSpiceDouble; 3usize], q: *mut SpiceDouble);
}
extern "C" {
    pub fn matchi_c(
        string: *mut ConstSpiceChar,
        templ: *mut ConstSpiceChar,
        wstr: SpiceChar,
        wchr: SpiceChar,
    ) -> SpiceBoolean;
}
extern "C" {
    pub fn matchw_c(
        string: *mut ConstSpiceChar,
        templ: *mut ConstSpiceChar,
        wstr: SpiceChar,
        wchr: SpiceChar,
    ) -> SpiceBoolean;
}
extern "C" {
    pub fn maxd_c(n: SpiceInt, ...) -> SpiceDouble;
}
extern "C" {
    pub fn maxi_c(n: SpiceInt, ...) -> SpiceInt;
}
extern "C" {
    pub fn mequ_c(m1: *mut [ConstSpiceDouble; 3usize], mout: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn mequg_c(
        m1: *const ::std::os::raw::c_void,
        nr: SpiceInt,
        nc: SpiceInt,
        mout: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mind_c(n: SpiceInt, ...) -> SpiceDouble;
}
extern "C" {
    pub fn mini_c(n: SpiceInt, ...) -> SpiceInt;
}
extern "C" {
    pub fn mtxm_c(
        m1: *mut [ConstSpiceDouble; 3usize],
        m2: *mut [ConstSpiceDouble; 3usize],
        mout: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn mtxmg_c(
        m1: *const ::std::os::raw::c_void,
        m2: *const ::std::os::raw::c_void,
        row1: SpiceInt,
        col1: SpiceInt,
        col2: SpiceInt,
        mout: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mtxv_c(
        m1: *mut [ConstSpiceDouble; 3usize],
        vin: *mut ConstSpiceDouble,
        vout: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn mtxvg_c(
        m1: *const ::std::os::raw::c_void,
        v2: *const ::std::os::raw::c_void,
        ncol1: SpiceInt,
        nr1r2: SpiceInt,
        vout: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mxm_c(
        m1: *mut [ConstSpiceDouble; 3usize],
        m2: *mut [ConstSpiceDouble; 3usize],
        mout: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn mxmg_c(
        m1: *const ::std::os::raw::c_void,
        m2: *const ::std::os::raw::c_void,
        row1: SpiceInt,
        col1: SpiceInt,
        col2: SpiceInt,
        mout: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mxmt_c(
        m1: *mut [ConstSpiceDouble; 3usize],
        m2: *mut [ConstSpiceDouble; 3usize],
        mout: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn mxmtg_c(
        m1: *const ::std::os::raw::c_void,
        m2: *const ::std::os::raw::c_void,
        nrow1: SpiceInt,
        nc1c2: SpiceInt,
        nrow2: SpiceInt,
        mout: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mxv_c(
        m1: *mut [ConstSpiceDouble; 3usize],
        vin: *mut ConstSpiceDouble,
        vout: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn mxvg_c(
        m1: *const ::std::os::raw::c_void,
        v2: *const ::std::os::raw::c_void,
        nrow1: SpiceInt,
        nc1r2: SpiceInt,
        vout: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn namfrm_c(frname: *mut ConstSpiceChar, frcode: *mut SpiceInt);
}
extern "C" {
    pub fn ncpos_c(
        str_: *mut ConstSpiceChar,
        chars: *mut ConstSpiceChar,
        start: SpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn ncposr_c(
        str_: *mut ConstSpiceChar,
        chars: *mut ConstSpiceChar,
        start: SpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn nearpt_c(
        positn: *mut ConstSpiceDouble,
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        npoint: *mut SpiceDouble,
        alt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn npedln_c(
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        linept: *mut ConstSpiceDouble,
        linedr: *mut ConstSpiceDouble,
        pnear: *mut SpiceDouble,
        dist: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn npelpt_c(
        point: *mut ConstSpiceDouble,
        ellips: *mut ConstSpiceEllipse,
        pnear: *mut SpiceDouble,
        dist: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn nplnpt_c(
        linpt: *mut ConstSpiceDouble,
        lindir: *mut ConstSpiceDouble,
        point: *mut ConstSpiceDouble,
        pnear: *mut SpiceDouble,
        dist: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn nvc2pl_c(normal: *mut ConstSpiceDouble, constant: SpiceDouble, plane: *mut SpicePlane);
}
extern "C" {
    pub fn nvp2pl_c(
        normal: *mut ConstSpiceDouble,
        point: *mut ConstSpiceDouble,
        plane: *mut SpicePlane,
    );
}
extern "C" {
    pub fn occult_c(
        target1: *mut ConstSpiceChar,
        shape1: *mut ConstSpiceChar,
        frame1: *mut ConstSpiceChar,
        target2: *mut ConstSpiceChar,
        shape2: *mut ConstSpiceChar,
        frame2: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        observer: *mut ConstSpiceChar,
        time: SpiceDouble,
        occult_code: *mut SpiceInt,
    );
}
extern "C" {
    pub fn ordc_c(item: *mut ConstSpiceChar, set: *mut SpiceCell) -> SpiceInt;
}
extern "C" {
    pub fn ordd_c(item: SpiceDouble, set: *mut SpiceCell) -> SpiceInt;
}
extern "C" {
    pub fn ordi_c(item: SpiceInt, set: *mut SpiceCell) -> SpiceInt;
}
extern "C" {
    pub fn orderc_c(
        lenvals: SpiceInt,
        array: *const ::std::os::raw::c_void,
        ndim: SpiceInt,
        iorder: *mut SpiceInt,
    );
}
extern "C" {
    pub fn orderd_c(array: *mut ConstSpiceDouble, ndim: SpiceInt, iorder: *mut SpiceInt);
}
extern "C" {
    pub fn orderi_c(array: *mut ConstSpiceInt, ndim: SpiceInt, iorder: *mut SpiceInt);
}
extern "C" {
    pub fn oscelt_c(
        state: *mut ConstSpiceDouble,
        et: SpiceDouble,
        mu: SpiceDouble,
        elts: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn oscltx_c(
        state: *mut ConstSpiceDouble,
        et: SpiceDouble,
        mu: SpiceDouble,
        elts: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn pckcls_c(handle: SpiceInt);
}
extern "C" {
    pub fn pckcov_c(pck: *mut ConstSpiceChar, idcode: SpiceInt, cover: *mut SpiceCell);
}
extern "C" {
    pub fn pckfrm_c(pck: *mut ConstSpiceChar, ids: *mut SpiceCell);
}
extern "C" {
    pub fn pcklof_c(fname: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn pckopn_c(
        name: *mut ConstSpiceChar,
        ifname: *mut ConstSpiceChar,
        ncomch: SpiceInt,
        handle: *mut SpiceInt,
    );
}
extern "C" {
    pub fn pckuof_c(handle: SpiceInt);
}
extern "C" {
    pub fn pckw02_c(
        handle: SpiceInt,
        clssid: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        intlen: SpiceDouble,
        n: SpiceInt,
        polydg: SpiceInt,
        cdata: *mut SpiceDouble,
        btime: SpiceDouble,
    );
}
extern "C" {
    pub fn pcpool_c(
        name: *mut ConstSpiceChar,
        n: SpiceInt,
        lenvals: SpiceInt,
        cvals: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pdpool_c(name: *mut ConstSpiceChar, n: SpiceInt, dvals: *mut ConstSpiceDouble);
}
extern "C" {
    pub fn pgrrec_c(
        body: *mut ConstSpiceChar,
        lon: SpiceDouble,
        lat: SpiceDouble,
        alt: SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        rectan: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn phaseq_c(
        et: SpiceDouble,
        target: *mut ConstSpiceChar,
        illumn: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn pi_c() -> SpiceDouble;
}
extern "C" {
    pub fn pipool_c(name: *mut ConstSpiceChar, n: SpiceInt, ivals: *mut ConstSpiceInt);
}
extern "C" {
    pub fn pjelpl_c(
        elin: *mut ConstSpiceEllipse,
        plane: *mut ConstSpicePlane,
        elout: *mut SpiceEllipse,
    );
}
extern "C" {
    pub fn pl2nvc_c(
        plane: *mut ConstSpicePlane,
        normal: *mut SpiceDouble,
        constant: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn pl2nvp_c(plane: *mut ConstSpicePlane, normal: *mut SpiceDouble, point: *mut SpiceDouble);
}
extern "C" {
    pub fn pl2psv_c(
        plane: *mut ConstSpicePlane,
        point: *mut SpiceDouble,
        span1: *mut SpiceDouble,
        span2: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn pltar_c(
        nv: SpiceInt,
        vrtces: *mut [ConstSpiceDouble; 3usize],
        np: SpiceInt,
        plates: *mut [ConstSpiceInt; 3usize],
    ) -> SpiceDouble;
}
extern "C" {
    pub fn pltexp_c(
        iverts: *mut [ConstSpiceDouble; 3usize],
        delta: SpiceDouble,
        overts: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn pltnp_c(
        point: *mut ConstSpiceDouble,
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        v3: *mut ConstSpiceDouble,
        pnear: *mut SpiceDouble,
        dist: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn pltnrm_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        v3: *mut ConstSpiceDouble,
        normal: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn pltvol_c(
        nv: SpiceInt,
        vrtces: *mut [ConstSpiceDouble; 3usize],
        np: SpiceInt,
        plates: *mut [ConstSpiceInt; 3usize],
    ) -> SpiceDouble;
}
extern "C" {
    pub fn polyds_c(
        coeffs: *mut ConstSpiceDouble,
        deg: SpiceInt,
        nderiv: SpiceInt,
        t: SpiceDouble,
        p: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn pos_c(
        str_: *mut ConstSpiceChar,
        substr: *mut ConstSpiceChar,
        start: SpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn posr_c(
        str_: *mut ConstSpiceChar,
        substr: *mut ConstSpiceChar,
        start: SpiceInt,
    ) -> SpiceInt;
}
extern "C" {
    pub fn prefix_c(
        pref: *mut ConstSpiceChar,
        spaces: SpiceInt,
        lenout: SpiceInt,
        string: *mut SpiceChar,
    );
}
extern "C" {
    pub fn prompt_c(
        prmptStr: *mut ConstSpiceChar,
        lenout: SpiceInt,
        buffer: *mut SpiceChar,
    ) -> *mut SpiceChar;
}
extern "C" {
    pub fn prop2b_c(
        gm: SpiceDouble,
        pvinit: *mut ConstSpiceDouble,
        dt: SpiceDouble,
        pvprop: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn prsdp_c(string: *mut ConstSpiceChar, dpval: *mut SpiceDouble);
}
extern "C" {
    pub fn prsint_c(string: *mut ConstSpiceChar, intval: *mut SpiceInt);
}
extern "C" {
    pub fn psv2pl_c(
        point: *mut ConstSpiceDouble,
        span1: *mut ConstSpiceDouble,
        span2: *mut ConstSpiceDouble,
        plane: *mut SpicePlane,
    );
}
extern "C" {
    pub fn putcml_c(argc: SpiceInt, argv: *mut *mut SpiceChar);
}
extern "C" {
    pub fn pxform_c(
        from: *mut ConstSpiceChar,
        to: *mut ConstSpiceChar,
        et: SpiceDouble,
        rotate: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn pxfrm2_c(
        from: *mut ConstSpiceChar,
        to: *mut ConstSpiceChar,
        etfrom: SpiceDouble,
        etto: SpiceDouble,
        rotate: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn q2m_c(q: *mut ConstSpiceDouble, r: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn qcktrc_c(tracelen: SpiceInt, trace: *mut SpiceChar);
}
extern "C" {
    pub fn qdq2av_c(q: *mut ConstSpiceDouble, dq: *mut ConstSpiceDouble, av: *mut SpiceDouble);
}
extern "C" {
    pub fn qxq_c(q1: *mut ConstSpiceDouble, q2: *mut ConstSpiceDouble, qout: *mut SpiceDouble);
}
extern "C" {
    pub fn radrec_c(
        range: SpiceDouble,
        ra: SpiceDouble,
        dec: SpiceDouble,
        rectan: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn rav2xf_c(
        rot: *mut [ConstSpiceDouble; 3usize],
        av: *mut ConstSpiceDouble,
        xform: *mut [SpiceDouble; 6usize],
    );
}
extern "C" {
    pub fn raxisa_c(
        matrix: *mut [ConstSpiceDouble; 3usize],
        axis: *mut SpiceDouble,
        angle: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn rdtext_c(
        file: *mut ConstSpiceChar,
        lenout: SpiceInt,
        line: *mut SpiceChar,
        eof: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn recazl_c(
        rectan: *mut ConstSpiceDouble,
        azccw: SpiceBoolean,
        elplsz: SpiceBoolean,
        range: *mut SpiceDouble,
        az: *mut SpiceDouble,
        el: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn reccyl_c(
        rectan: *mut ConstSpiceDouble,
        r: *mut SpiceDouble,
        lon: *mut SpiceDouble,
        z: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn recgeo_c(
        rectan: *mut ConstSpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        lon: *mut SpiceDouble,
        lat: *mut SpiceDouble,
        alt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn reclat_c(
        rectan: *mut ConstSpiceDouble,
        radius: *mut SpiceDouble,
        longitude: *mut SpiceDouble,
        latitude: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn recpgr_c(
        body: *mut ConstSpiceChar,
        rectan: *mut SpiceDouble,
        re: SpiceDouble,
        f: SpiceDouble,
        lon: *mut SpiceDouble,
        lat: *mut SpiceDouble,
        alt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn recrad_c(
        rectan: *mut ConstSpiceDouble,
        radius: *mut SpiceDouble,
        ra: *mut SpiceDouble,
        dec: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn reordc_c(
        iorder: *mut ConstSpiceInt,
        ndim: SpiceInt,
        lenvals: SpiceInt,
        array: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn reordd_c(iorder: *mut ConstSpiceInt, ndim: SpiceInt, array: *mut SpiceDouble);
}
extern "C" {
    pub fn reordi_c(iorder: *mut ConstSpiceInt, ndim: SpiceInt, array: *mut SpiceInt);
}
extern "C" {
    pub fn reordl_c(iorder: *mut ConstSpiceInt, ndim: SpiceInt, array: *mut SpiceBoolean);
}
extern "C" {
    pub fn removc_c(item: *mut ConstSpiceChar, set: *mut SpiceCell);
}
extern "C" {
    pub fn removd_c(item: SpiceDouble, set: *mut SpiceCell);
}
extern "C" {
    pub fn removi_c(item: SpiceInt, set: *mut SpiceCell);
}
extern "C" {
    pub fn repmc_c(
        in_: *mut ConstSpiceChar,
        marker: *mut ConstSpiceChar,
        value: *mut ConstSpiceChar,
        lenout: SpiceInt,
        out: *mut SpiceChar,
    );
}
extern "C" {
    pub fn repmct_c(
        in_: *mut ConstSpiceChar,
        marker: *mut ConstSpiceChar,
        value: SpiceInt,
        strCase: SpiceChar,
        lenout: SpiceInt,
        out: *mut SpiceChar,
    );
}
extern "C" {
    pub fn repmd_c(
        in_: *mut ConstSpiceChar,
        marker: *mut ConstSpiceChar,
        value: SpiceDouble,
        sigdig: SpiceInt,
        lenout: SpiceInt,
        out: *mut SpiceChar,
    );
}
extern "C" {
    pub fn repmf_c(
        in_: *mut ConstSpiceChar,
        marker: *mut ConstSpiceChar,
        value: SpiceDouble,
        sigdig: SpiceInt,
        format: SpiceChar,
        lenout: SpiceInt,
        out: *mut SpiceChar,
    );
}
extern "C" {
    pub fn repmi_c(
        in_: *mut ConstSpiceChar,
        marker: *mut ConstSpiceChar,
        value: SpiceInt,
        lenout: SpiceInt,
        out: *mut SpiceChar,
    );
}
extern "C" {
    pub fn repmot_c(
        in_: *mut ConstSpiceChar,
        marker: *mut ConstSpiceChar,
        value: SpiceInt,
        strCase: SpiceChar,
        lenout: SpiceInt,
        out: *mut SpiceChar,
    );
}
extern "C" {
    pub fn reset_c();
}
extern "C" {
    pub fn return_c() -> SpiceBoolean;
}
extern "C" {
    pub fn recsph_c(
        rectan: *mut ConstSpiceDouble,
        r: *mut SpiceDouble,
        colat: *mut SpiceDouble,
        lon: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn rotate_c(angle: SpiceDouble, iaxis: SpiceInt, mout: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn rotmat_c(
        m1: *mut [ConstSpiceDouble; 3usize],
        angle: SpiceDouble,
        iaxis: SpiceInt,
        mout: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn rotvec_c(
        v1: *mut ConstSpiceDouble,
        angle: SpiceDouble,
        iaxis: SpiceInt,
        vout: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn rpd_c() -> SpiceDouble;
}
extern "C" {
    pub fn rquad_c(
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        root1: *mut SpiceDouble,
        root2: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn saelgv_c(
        vec1: *mut ConstSpiceDouble,
        vec2: *mut ConstSpiceDouble,
        smajor: *mut SpiceDouble,
        sminor: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn scard_c(card: SpiceInt, cell: *mut SpiceCell);
}
extern "C" {
    pub fn scdecd_c(sc: SpiceInt, sclkdp: SpiceDouble, sclklen: SpiceInt, sclkch: *mut SpiceChar);
}
extern "C" {
    pub fn sce2s_c(sc: SpiceInt, et: SpiceDouble, sclklen: SpiceInt, sclkch: *mut SpiceChar);
}
extern "C" {
    pub fn sce2c_c(sc: SpiceInt, et: SpiceDouble, sclkdp: *mut SpiceDouble);
}
extern "C" {
    pub fn sce2t_c(sc: SpiceInt, et: SpiceDouble, sclkdp: *mut SpiceDouble);
}
extern "C" {
    pub fn scencd_c(sc: SpiceInt, sclkch: *mut ConstSpiceChar, sclkdp: *mut SpiceDouble);
}
extern "C" {
    pub fn scfmt_c(sc: SpiceInt, ticks: SpiceDouble, clkstrlen: SpiceInt, clkstr: *mut SpiceChar);
}
extern "C" {
    pub fn scpart_c(
        sc: SpiceInt,
        nparts: *mut SpiceInt,
        pstart: *mut SpiceDouble,
        pstop: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn scs2e_c(sc: SpiceInt, sclkch: *mut ConstSpiceChar, et: *mut SpiceDouble);
}
extern "C" {
    pub fn sct2e_c(sc: SpiceInt, sclkdp: SpiceDouble, et: *mut SpiceDouble);
}
extern "C" {
    pub fn sctiks_c(sc: SpiceInt, clkstr: *mut ConstSpiceChar, ticks: *mut SpiceDouble);
}
extern "C" {
    pub fn sdiff_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn set_c(a: *mut SpiceCell, op: *mut ConstSpiceChar, b: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn setmsg_c(msg: *mut ConstSpiceChar);
}
extern "C" {
    pub fn shellc_c(ndim: SpiceInt, lenvals: SpiceInt, array: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn shelld_c(ndim: SpiceInt, array: *mut SpiceDouble);
}
extern "C" {
    pub fn shelli_c(ndim: SpiceInt, array: *mut SpiceInt);
}
extern "C" {
    pub fn sigerr_c(message: *mut ConstSpiceChar);
}
extern "C" {
    pub fn sincpt_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        dref: *mut ConstSpiceChar,
        dvec: *mut ConstSpiceDouble,
        spoint: *mut SpiceDouble,
        trgepc: *mut SpiceDouble,
        srfvec: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn size_c(size: *mut SpiceCell) -> SpiceInt;
}
extern "C" {
    pub fn spd_c() -> SpiceDouble;
}
extern "C" {
    pub fn sphcyl_c(
        radius: SpiceDouble,
        colat: SpiceDouble,
        slon: SpiceDouble,
        r: *mut SpiceDouble,
        lon: *mut SpiceDouble,
        z: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn sphlat_c(
        r: SpiceDouble,
        colat: SpiceDouble,
        lons: SpiceDouble,
        radius: *mut SpiceDouble,
        lon: *mut SpiceDouble,
        lat: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn sphrec_c(r: SpiceDouble, colat: SpiceDouble, lon: SpiceDouble, rectan: *mut SpiceDouble);
}
extern "C" {
    pub fn spk14a_c(
        handle: SpiceInt,
        ncsets: SpiceInt,
        coeffs: *mut ConstSpiceDouble,
        epochs: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn spk14b_c(
        handle: SpiceInt,
        segid: *mut ConstSpiceChar,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        chbdeg: SpiceInt,
    );
}
extern "C" {
    pub fn spk14e_c(handle: SpiceInt);
}
extern "C" {
    pub fn spkapo_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        sobs: *mut ConstSpiceDouble,
        abcorr: *mut ConstSpiceChar,
        ptarg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkapp_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        sobs: *mut ConstSpiceDouble,
        abcorr: *mut ConstSpiceChar,
        starg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkacs_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obs: SpiceInt,
        starg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
        dlt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkaps_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        stobs: *mut ConstSpiceDouble,
        accobs: *mut ConstSpiceDouble,
        starg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
        dlt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkcls_c(handle: SpiceInt);
}
extern "C" {
    pub fn spkcov_c(spk: *mut ConstSpiceChar, idcode: SpiceInt, cover: *mut SpiceCell);
}
extern "C" {
    pub fn spkcpo_c(
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        outref: *mut ConstSpiceChar,
        refloc: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obssta: *mut ConstSpiceDouble,
        obsctr: *mut ConstSpiceChar,
        obsref: *mut ConstSpiceChar,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkcpt_c(
        trgpos: *mut ConstSpiceDouble,
        trgctr: *mut ConstSpiceChar,
        trgref: *mut ConstSpiceChar,
        et: SpiceDouble,
        outref: *mut ConstSpiceChar,
        refloc: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkcvo_c(
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        outref: *mut ConstSpiceChar,
        refloc: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obssta: *mut ConstSpiceDouble,
        obsepc: SpiceDouble,
        obsctr: *mut ConstSpiceChar,
        obsref: *mut ConstSpiceChar,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkcvt_c(
        trgsta: *mut ConstSpiceDouble,
        trgepc: SpiceDouble,
        trgctr: *mut ConstSpiceChar,
        trgref: *mut ConstSpiceChar,
        et: SpiceDouble,
        outref: *mut ConstSpiceChar,
        refloc: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkez_c(
        target: SpiceInt,
        epoch: SpiceDouble,
        frame: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        observer: SpiceInt,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkezp_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obs: SpiceInt,
        ptarg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkezr_c(
        target: *mut ConstSpiceChar,
        epoch: SpiceDouble,
        frame: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        observer: *mut ConstSpiceChar,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkgeo_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        obs: SpiceInt,
        state: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkgps_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        obs: SpiceInt,
        pos: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spklef_c(filename: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn spkltc_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        stobs: *mut ConstSpiceDouble,
        starg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
        dlt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkobj_c(spk: *mut ConstSpiceChar, ids: *mut SpiceCell);
}
extern "C" {
    pub fn spkopa_c(file: *mut ConstSpiceChar, handle: *mut SpiceInt);
}
extern "C" {
    pub fn spkopn_c(
        name: *mut ConstSpiceChar,
        ifname: *mut ConstSpiceChar,
        ncomch: SpiceInt,
        handle: *mut SpiceInt,
    );
}
extern "C" {
    pub fn spkpds_c(
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        type_: SpiceInt,
        first: SpiceDouble,
        last: SpiceDouble,
        descr: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkpos_c(
        targ: *mut ConstSpiceChar,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obs: *mut ConstSpiceChar,
        ptarg: *mut SpiceDouble,
        lt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spkpvn_c(
        handle: SpiceInt,
        descr: *mut ConstSpiceDouble,
        et: SpiceDouble,
        ref_: *mut SpiceInt,
        state: *mut SpiceDouble,
        center: *mut SpiceInt,
    );
}
extern "C" {
    pub fn spksfs_c(
        body: SpiceInt,
        et: SpiceDouble,
        idlen: SpiceInt,
        handle: *mut SpiceInt,
        descr: *mut SpiceDouble,
        ident: *mut SpiceChar,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn spkssb_c(
        targ: SpiceInt,
        et: SpiceDouble,
        ref_: *mut ConstSpiceChar,
        starg: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn spksub_c(
        handle: SpiceInt,
        descr: *mut SpiceDouble,
        ident: *mut ConstSpiceChar,
        begin: SpiceDouble,
        end: SpiceDouble,
        newh: SpiceInt,
    );
}
extern "C" {
    pub fn spkuds_c(
        descr: *mut ConstSpiceDouble,
        body: *mut SpiceInt,
        center: *mut SpiceInt,
        frame: *mut SpiceInt,
        type_: *mut SpiceInt,
        first: *mut SpiceDouble,
        last: *mut SpiceDouble,
        begin: *mut SpiceInt,
        end: *mut SpiceInt,
    );
}
extern "C" {
    pub fn spkuef_c(handle: SpiceInt);
}
extern "C" {
    pub fn spkw02_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        intlen: SpiceDouble,
        n: SpiceInt,
        polydg: SpiceInt,
        cdata: *mut ConstSpiceDouble,
        btime: SpiceDouble,
    );
}
extern "C" {
    pub fn spkw03_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        intlen: SpiceDouble,
        n: SpiceInt,
        polydg: SpiceInt,
        cdata: *mut ConstSpiceDouble,
        btime: SpiceDouble,
    );
}
extern "C" {
    pub fn spkw05_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        gm: SpiceDouble,
        n: SpiceInt,
        states: *mut [ConstSpiceDouble; 6usize],
        epochs: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn spkw08_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        degree: SpiceInt,
        n: SpiceInt,
        states: *mut [ConstSpiceDouble; 6usize],
        epoch1: SpiceDouble,
        step: SpiceDouble,
    );
}
extern "C" {
    pub fn spkw09_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        degree: SpiceInt,
        n: SpiceInt,
        states: *mut [ConstSpiceDouble; 6usize],
        epochs: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn spkw10_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        consts: *mut ConstSpiceDouble,
        n: SpiceInt,
        elems: *mut ConstSpiceDouble,
        epochs: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn spkw12_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        degree: SpiceInt,
        n: SpiceInt,
        states: *mut [ConstSpiceDouble; 6usize],
        epoch0: SpiceDouble,
        step: SpiceDouble,
    );
}
extern "C" {
    pub fn spkw13_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        degree: SpiceInt,
        n: SpiceInt,
        states: *mut [ConstSpiceDouble; 6usize],
        epochs: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn spkw15_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        epoch: SpiceDouble,
        tp: *mut ConstSpiceDouble,
        pa: *mut ConstSpiceDouble,
        p: SpiceDouble,
        ecc: SpiceDouble,
        j2flg: SpiceDouble,
        pv: *mut ConstSpiceDouble,
        gm: SpiceDouble,
        j2: SpiceDouble,
        radius: SpiceDouble,
    );
}
extern "C" {
    pub fn spkw17_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        epoch: SpiceDouble,
        eqel: *mut ConstSpiceDouble,
        rapol: SpiceDouble,
        decpol: SpiceDouble,
    );
}
extern "C" {
    pub fn spkw18_c(
        handle: SpiceInt,
        subtyp: SpiceSPK18Subtype,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        degree: SpiceInt,
        n: SpiceInt,
        packts: *const ::std::os::raw::c_void,
        epochs: *mut ConstSpiceDouble,
    );
}
extern "C" {
    pub fn spkw20_c(
        handle: SpiceInt,
        body: SpiceInt,
        center: SpiceInt,
        frame: *mut ConstSpiceChar,
        first: SpiceDouble,
        last: SpiceDouble,
        segid: *mut ConstSpiceChar,
        intlen: SpiceDouble,
        n: SpiceInt,
        polydg: SpiceInt,
        cdata: *mut ConstSpiceDouble,
        dscale: SpiceDouble,
        tscale: SpiceDouble,
        initjd: SpiceDouble,
        initfr: SpiceDouble,
    );
}
extern "C" {
    pub fn srfrec_c(body: SpiceInt, lon: SpiceDouble, lat: SpiceDouble, rectan: *mut SpiceDouble);
}
extern "C" {
    pub fn srfc2s_c(
        code: SpiceInt,
        bodyid: SpiceInt,
        srflen: SpiceInt,
        srfstr: *mut SpiceChar,
        isname: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn srfcss_c(
        code: SpiceInt,
        bodstr: *mut ConstSpiceChar,
        srflen: SpiceInt,
        srfstr: *mut SpiceChar,
        isname: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn srfnrm_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        npts: SpiceInt,
        srfpts: *mut [ConstSpiceDouble; 3usize],
        normls: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn srfs2c_c(
        srfstr: *mut ConstSpiceChar,
        bodstr: *mut ConstSpiceChar,
        code: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn srfscc_c(
        surfce: *mut ConstSpiceChar,
        bodyid: SpiceInt,
        surfid: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn srfxpt_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        dref: *mut ConstSpiceChar,
        dvec: *mut ConstSpiceDouble,
        spoint: *mut SpiceDouble,
        dist: *mut SpiceDouble,
        trgepc: *mut SpiceDouble,
        obspos: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn ssize_c(size: SpiceInt, cell: *mut SpiceCell);
}
extern "C" {
    pub fn stelab_c(
        pobj: *mut ConstSpiceDouble,
        vobs: *mut ConstSpiceDouble,
        appobj: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn stpool_c(
        item: *mut ConstSpiceChar,
        nth: SpiceInt,
        contin: *mut ConstSpiceChar,
        lenout: SpiceInt,
        string: *mut SpiceChar,
        size: *mut SpiceInt,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn str2et_c(date: *mut ConstSpiceChar, et: *mut SpiceDouble);
}
extern "C" {
    pub fn subpnt_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut SpiceDouble,
        trgepc: *mut SpiceDouble,
        srfvec: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn subpt_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut SpiceDouble,
        alt: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn subslr_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut SpiceDouble,
        trgepc: *mut SpiceDouble,
        srfvec: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn subsol_c(
        method: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        abcorr: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        spoint: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn sumad_c(array: *mut ConstSpiceDouble, n: SpiceInt) -> SpiceDouble;
}
extern "C" {
    pub fn sumai_c(array: *mut ConstSpiceInt, n: SpiceInt) -> SpiceInt;
}
extern "C" {
    pub fn surfnm_c(
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        point: *mut ConstSpiceDouble,
        normal: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn surfpt_c(
        positn: *mut ConstSpiceDouble,
        u: *mut ConstSpiceDouble,
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        point: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn surfpv_c(
        stvrtx: *mut ConstSpiceDouble,
        stdir: *mut ConstSpiceDouble,
        a: SpiceDouble,
        b: SpiceDouble,
        c: SpiceDouble,
        stx: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn swpool_c(
        agent: *mut ConstSpiceChar,
        nnames: SpiceInt,
        lenvals: SpiceInt,
        names: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn sxform_c(
        from: *mut ConstSpiceChar,
        to: *mut ConstSpiceChar,
        et: SpiceDouble,
        xform: *mut [SpiceDouble; 6usize],
    );
}
extern "C" {
    pub fn szpool_c(name: *mut ConstSpiceChar, n: *mut SpiceInt, found: *mut SpiceBoolean);
}
extern "C" {
    pub fn termpt_c(
        method: *mut ConstSpiceChar,
        ilusrc: *mut ConstSpiceChar,
        target: *mut ConstSpiceChar,
        et: SpiceDouble,
        fixref: *mut ConstSpiceChar,
        abcorr: *mut ConstSpiceChar,
        corloc: *mut ConstSpiceChar,
        obsrvr: *mut ConstSpiceChar,
        refvec: *mut ConstSpiceDouble,
        rolstp: SpiceDouble,
        ncuts: SpiceInt,
        schstp: SpiceDouble,
        soltol: SpiceDouble,
        maxn: SpiceInt,
        npts: *mut SpiceInt,
        points: *mut [SpiceDouble; 3usize],
        epochs: *mut SpiceDouble,
        tangts: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn timdef_c(
        action: *mut ConstSpiceChar,
        item: *mut ConstSpiceChar,
        lenout: SpiceInt,
        value: *mut SpiceChar,
    );
}
extern "C" {
    pub fn timout_c(
        et: SpiceDouble,
        pictur: *mut ConstSpiceChar,
        lenout: SpiceInt,
        output: *mut SpiceChar,
    );
}
extern "C" {
    pub fn tipbod_c(
        ref_: *mut ConstSpiceChar,
        body: SpiceInt,
        et: SpiceDouble,
        tipm: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn tisbod_c(
        ref_: *mut ConstSpiceChar,
        body: SpiceInt,
        et: SpiceDouble,
        tsipm: *mut [SpiceDouble; 6usize],
    );
}
extern "C" {
    pub fn tkvrsn_c(item: *mut ConstSpiceChar) -> *mut ConstSpiceChar;
}
extern "C" {
    pub fn tparse_c(
        string: *mut ConstSpiceChar,
        lenout: SpiceInt,
        sp2000: *mut SpiceDouble,
        errmsg: *mut SpiceChar,
    );
}
extern "C" {
    pub fn tpictr_c(
        sample: *mut ConstSpiceChar,
        lenpictur: SpiceInt,
        lenerror: SpiceInt,
        pictur: *mut SpiceChar,
        ok: *mut SpiceBoolean,
        error: *mut SpiceChar,
    );
}
extern "C" {
    pub fn trace_c(matrix: *mut [ConstSpiceDouble; 3usize]) -> SpiceDouble;
}
extern "C" {
    pub fn trcdep_c(depth: *mut SpiceInt);
}
extern "C" {
    pub fn trcnam_c(index: SpiceInt, namelen: SpiceInt, name: *mut SpiceChar);
}
extern "C" {
    pub fn trcoff_c();
}
extern "C" {
    pub fn tsetyr_c(year: SpiceInt);
}
extern "C" {
    pub fn twopi_c() -> SpiceDouble;
}
extern "C" {
    pub fn twovec_c(
        axdef: *mut ConstSpiceDouble,
        indexa: SpiceInt,
        plndef: *mut ConstSpiceDouble,
        indexp: SpiceInt,
        mout: *mut [SpiceDouble; 3usize],
    );
}
extern "C" {
    pub fn tyear_c() -> SpiceDouble;
}
extern "C" {
    pub fn ucase_c(in_: *mut SpiceChar, lenout: SpiceInt, out: *mut SpiceChar);
}
extern "C" {
    pub fn ucrss_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn uddc_c(
        udfunc: ::std::option::Option<
            unsafe extern "C" fn(x: SpiceDouble, value: *mut SpiceDouble),
        >,
        x: SpiceDouble,
        dx: SpiceDouble,
        isdecr: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn uddf_c(
        udfunc: ::std::option::Option<
            unsafe extern "C" fn(x: SpiceDouble, value: *mut SpiceDouble),
        >,
        x: SpiceDouble,
        dx: SpiceDouble,
        deriv: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn udf_c(x: SpiceDouble, value: *mut SpiceDouble);
}
extern "C" {
    pub fn union_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn unitim_c(
        epoch: SpiceDouble,
        insys: *mut ConstSpiceChar,
        outsys: *mut ConstSpiceChar,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn unload_c(file: *mut ConstSpiceChar);
}
extern "C" {
    pub fn unorm_c(v1: *mut ConstSpiceDouble, vout: *mut SpiceDouble, vmag: *mut SpiceDouble);
}
extern "C" {
    pub fn unormg_c(
        v1: *mut ConstSpiceDouble,
        ndim: SpiceInt,
        vout: *mut SpiceDouble,
        vmag: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn utc2et_c(utcstr: *mut ConstSpiceChar, et: *mut SpiceDouble);
}
extern "C" {
    pub fn vadd_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vaddg_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        ndim: SpiceInt,
        vout: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn valid_c(size: SpiceInt, n: SpiceInt, a: *mut SpiceCell);
}
extern "C" {
    pub fn vcrss_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vdist_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn vdistg_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        ndim: SpiceInt,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn vdot_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn vdotg_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        ndim: SpiceInt,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn vequ_c(vin: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vequg_c(vin: *mut ConstSpiceDouble, ndim: SpiceInt, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vhat_c(v1: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vhatg_c(v1: *mut ConstSpiceDouble, ndim: SpiceInt, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vlcom_c(
        a: SpiceDouble,
        v1: *mut ConstSpiceDouble,
        b: SpiceDouble,
        v2: *mut ConstSpiceDouble,
        sum: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vlcom3_c(
        a: SpiceDouble,
        v1: *mut ConstSpiceDouble,
        b: SpiceDouble,
        v2: *mut ConstSpiceDouble,
        c: SpiceDouble,
        v3: *mut ConstSpiceDouble,
        sum: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vlcomg_c(
        n: SpiceInt,
        a: SpiceDouble,
        v1: *mut ConstSpiceDouble,
        b: SpiceDouble,
        v2: *mut ConstSpiceDouble,
        sum: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vminug_c(vin: *mut ConstSpiceDouble, ndim: SpiceInt, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vminus_c(v1: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vnorm_c(v1: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn vnormg_c(v1: *mut ConstSpiceDouble, ndim: SpiceInt) -> SpiceDouble;
}
extern "C" {
    pub fn vpack_c(x: SpiceDouble, y: SpiceDouble, z: SpiceDouble, v: *mut SpiceDouble);
}
extern "C" {
    pub fn vperp_c(a: *mut ConstSpiceDouble, b: *mut ConstSpiceDouble, p: *mut SpiceDouble);
}
extern "C" {
    pub fn vprjp_c(vin: *mut ConstSpiceDouble, plane: *mut ConstSpicePlane, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vprjpi_c(
        vin: *mut ConstSpiceDouble,
        projpl: *mut ConstSpicePlane,
        invpl: *mut ConstSpicePlane,
        vout: *mut SpiceDouble,
        found: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn vproj_c(a: *mut ConstSpiceDouble, b: *mut ConstSpiceDouble, p: *mut SpiceDouble);
}
extern "C" {
    pub fn vrel_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn vrelg_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        ndim: SpiceInt,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn vrotv_c(
        v: *mut ConstSpiceDouble,
        axis: *mut ConstSpiceDouble,
        theta: SpiceDouble,
        r: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vscl_c(s: SpiceDouble, v1: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vsclg_c(
        s: SpiceDouble,
        v1: *mut ConstSpiceDouble,
        ndim: SpiceInt,
        vout: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vsep_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble) -> SpiceDouble;
}
extern "C" {
    pub fn vsub_c(v1: *mut ConstSpiceDouble, v2: *mut ConstSpiceDouble, vout: *mut SpiceDouble);
}
extern "C" {
    pub fn vsubg_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        ndim: SpiceInt,
        vout: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vsepg_c(
        v1: *mut ConstSpiceDouble,
        v2: *mut ConstSpiceDouble,
        ndim: SpiceInt,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn vtmv_c(
        v1: *mut ConstSpiceDouble,
        matrix: *mut [ConstSpiceDouble; 3usize],
        v2: *mut ConstSpiceDouble,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn vtmvg_c(
        v1: *const ::std::os::raw::c_void,
        matrix: *const ::std::os::raw::c_void,
        v2: *const ::std::os::raw::c_void,
        nrow: SpiceInt,
        ncol: SpiceInt,
    ) -> SpiceDouble;
}
extern "C" {
    pub fn vupack_c(
        v: *mut ConstSpiceDouble,
        x: *mut SpiceDouble,
        y: *mut SpiceDouble,
        z: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn vzero_c(v: *mut ConstSpiceDouble) -> SpiceBoolean;
}
extern "C" {
    pub fn vzerog_c(v: *mut ConstSpiceDouble, ndim: SpiceInt) -> SpiceBoolean;
}
extern "C" {
    pub fn wncard_c(window: *mut SpiceCell) -> SpiceInt;
}
extern "C" {
    pub fn wncomd_c(
        left: SpiceDouble,
        right: SpiceDouble,
        window: *mut SpiceCell,
        result: *mut SpiceCell,
    );
}
extern "C" {
    pub fn wncond_c(left: SpiceDouble, right: SpiceDouble, window: *mut SpiceCell);
}
extern "C" {
    pub fn wndifd_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn wnelmd_c(point: SpiceDouble, window: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn wnexpd_c(left: SpiceDouble, right: SpiceDouble, window: *mut SpiceCell);
}
extern "C" {
    pub fn wnextd_c(side: SpiceChar, window: *mut SpiceCell);
}
extern "C" {
    pub fn wnfetd_c(
        window: *mut SpiceCell,
        n: SpiceInt,
        left: *mut SpiceDouble,
        right: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn wnfild_c(sml: SpiceDouble, window: *mut SpiceCell);
}
extern "C" {
    pub fn wnfltd_c(sml: SpiceDouble, window: *mut SpiceCell);
}
extern "C" {
    pub fn wnincd_c(left: SpiceDouble, right: SpiceDouble, window: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn wninsd_c(left: SpiceDouble, right: SpiceDouble, window: *mut SpiceCell);
}
extern "C" {
    pub fn wnintd_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn wnreld_c(a: *mut SpiceCell, op: *mut ConstSpiceChar, b: *mut SpiceCell) -> SpiceBoolean;
}
extern "C" {
    pub fn wnsumd_c(
        window: *mut SpiceCell,
        meas: *mut SpiceDouble,
        avg: *mut SpiceDouble,
        stddev: *mut SpiceDouble,
        shortest: *mut SpiceInt,
        longest: *mut SpiceInt,
    );
}
extern "C" {
    pub fn wnunid_c(a: *mut SpiceCell, b: *mut SpiceCell, c: *mut SpiceCell);
}
extern "C" {
    pub fn wnvald_c(size: SpiceInt, n: SpiceInt, window: *mut SpiceCell);
}
extern "C" {
    pub fn xf2eul_c(
        xform: *mut [ConstSpiceDouble; 6usize],
        axisa: SpiceInt,
        axisb: SpiceInt,
        axisc: SpiceInt,
        eulang: *mut SpiceDouble,
        unique: *mut SpiceBoolean,
    );
}
extern "C" {
    pub fn xf2rav_c(
        xform: *mut [ConstSpiceDouble; 6usize],
        rot: *mut [SpiceDouble; 3usize],
        av: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn xfmsta_c(
        input_state: *mut ConstSpiceDouble,
        input_coord_sys: *mut ConstSpiceChar,
        output_coord_sys: *mut ConstSpiceChar,
        body: *mut ConstSpiceChar,
        output_state: *mut SpiceDouble,
    );
}
extern "C" {
    pub fn xpose_c(m1: *mut [ConstSpiceDouble; 3usize], mout: *mut [SpiceDouble; 3usize]);
}
extern "C" {
    pub fn xpose6_c(m1: *mut [ConstSpiceDouble; 6usize], mout: *mut [SpiceDouble; 6usize]);
}
extern "C" {
    pub fn xposeg_c(
        matrix: *const ::std::os::raw::c_void,
        nrow: SpiceInt,
        ncol: SpiceInt,
        xposem: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zzgetcml_c(argc: *mut SpiceInt, argv: *mut *mut *mut SpiceChar, init: SpiceBoolean);
}
extern "C" {
    pub fn zzgfgeth_c() -> SpiceBoolean;
}
extern "C" {
    pub fn zzgfsavh_c(status: SpiceBoolean);
}
extern "C" {
    pub fn zzsynccl_c(xdir: SpiceTransDir, cell: *mut SpiceCell);
}
